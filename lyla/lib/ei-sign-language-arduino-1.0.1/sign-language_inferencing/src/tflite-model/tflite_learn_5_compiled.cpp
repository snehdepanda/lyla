/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.04.2024 18:30:23

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242720;
#else
constexpr int kTensorArenaSize = 241696;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[12] = { 17996, -31396, -24850, -22114, -22883, -27500, -26240, -29197, -33321, -19461, -25467, -27651, };
const TfArray<1, int> tensor_dimension2 = { 1, { 12 } };
const TfArray<12, float> quant2_scale = { 12, { 0.00027764320839196444, 0.00022714257647749037, 0.00030101923039183021, 0.00033517961855977774, 0.00031375361140817404, 0.00026794499717652798, 0.00029456737684085965, 0.00024837869568727911, 0.00022693297069054097, 0.00037193595198914409, 0.00028093767468817532, 0.00026273497496731579, } };
const TfArray<12, int> quant2_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[12*1*1*32] = { 
  /* [0][0][][] */ 31,-49,-6,-37,-31,-19,-113,44,15,-39,22,47,-90,-78,124,-49,-32,-81,12,-18,-7,35,118,74,57,-59,14,38,14,39,127,33, 
  /* [1][0][][] */ 50,-22,125,-76,96,-127,13,-70,-2,-69,-19,-101,91,125,-114,-45,30,47,48,9,-28,-79,34,58,-2,-60,21,-103,41,-122,-40,-101, 
  /* [2][0][][] */ -25,70,75,-111,-68,58,68,16,32,-92,63,-107,-87,-73,-30,-27,93,-56,-19,-90,-89,66,-62,2,-19,63,46,-81,-126,34,-127,-90, 
  /* [3][0][][] */ 52,6,35,-90,41,-30,90,-9,67,34,29,-107,-37,-75,-52,65,-55,94,-24,-49,-63,49,57,-37,-4,-69,55,-2,-104,22,-127,12, 
  /* [4][0][][] */ -26,101,-26,72,-44,24,22,-43,14,52,4,65,59,8,-58,70,-74,-37,7,23,-93,-44,9,-24,18,-127,2,-18,-97,25,-93,-99, 
  /* [5][0][][] */ 78,-28,48,-78,-46,110,-38,-80,-65,-31,-11,-15,118,-12,-39,-44,69,8,-127,-43,80,37,46,59,-63,-123,-28,-71,-38,-59,4,15, 
  /* [6][0][][] */ 77,-28,39,80,76,43,-56,-24,-24,-95,63,-52,11,18,-42,-67,-87,81,-43,54,-69,-58,-114,-21,-82,4,68,55,-4,89,-21,-127, 
  /* [7][0][][] */ -86,-24,-11,29,-17,111,-32,5,-13,-121,55,-127,53,-3,-58,107,49,-26,-36,-84,-48,23,43,103,-35,-73,64,64,-91,-11,-52,-22, 
  /* [8][0][][] */ -87,-36,127,86,1,-49,-28,89,7,-119,119,-123,99,-10,-54,-115,-80,59,-101,-15,-39,120,-16,-59,-48,64,41,41,20,87,-72,-33, 
  /* [9][0][][] */ -48,29,-22,-14,77,-54,-4,-8,46,-127,-30,-29,79,16,-66,69,39,54,-105,48,-61,-16,14,24,-23,-17,-25,48,55,-28,-20,16, 
  /* [10][0][][] */ 29,-1,-52,-73,-70,67,-19,-22,81,15,114,-58,11,42,-122,32,-97,-10,-55,-84,-22,15,44,-6,-2,127,15,-70,107,-76,-76,-92, 
  /* [11][0][][] */ 68,101,5,113,-96,-70,-119,-23,-74,43,22,-28,-3,76,-15,-9,-100,-51,-109,52,76,52,98,-85,38,86,96,-88,-52,-59,-127,-80, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 12,1,1,32 } };
const TfArray<12, float> quant3_scale = { 12, { 0.0035794004797935486, 0.0029283419717103243, 0.0038807662203907967, 0.0043211649172008038, 0.0040449388325214386, 0.0034543704241514206, 0.0037975884042680264, 0.003202119842171669, 0.0029256397392600775, 0.0047950306907296181, 0.0036218729801476002, 0.003387202275916934, } };
const TfArray<12, int> quant3_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 891, 350, -201, 206, -181, 50, -6, -11, 183, 464, 32, 963, 225, 121, 2438, 43, -524, 74, 1734, 415, 219, -86, 66, -147, 225, 308, -122, -78, 1006, -216, 2487, 847, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.5361131924437359e-05, 5.9067704569315538e-05, 4.4123775296611711e-05, 4.57423557236325e-05, 4.3705185817088932e-05, 6.6118162067141384e-05, 5.6821365433279425e-05, 5.6500230130041018e-05, 4.5909520849818364e-05, 5.4145395552041009e-05, 5.395550761022605e-05, 4.8988109483616427e-05, 4.9368332838639617e-05, 4.4084965338697657e-05, 6.9413508754223585e-05, 4.7558096412103623e-05, 5.1180752052459866e-05, 5.754555604653433e-05, 6.029956421116367e-05, 4.6718301746295765e-05, 5.248786328593269e-05, 4.6474378905259073e-05, 4.1597959352657199e-05, 5.0543461838969961e-05, 4.6504424972226843e-05, 6.7479391873348504e-05, 4.232057835906744e-05, 4.2918742110487074e-05, 4.8811198212206364e-05, 4.4867523683933541e-05, 6.6426888224668801e-05, 5.59329564566724e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -44,-57,123,33,91,1,-63,-99,80,-62,-86,15,46,29,-12,62,-44,-10,-48,-1,-53,-81,22,126,-78,19,95,-25,115,31,-2,-47,114,-48,-81,11,-84,-92,-106,40,73,-62,-102,109,44,-94,88,-10,43,-35,-5,111,-62,-42,-55,119,13,55,113,-97,-54,81,-74,84,-2,28,87,99,20,86,97,-100,115,-86,55,102,-85,32,-39,47,64,36,107,11,-40,-31,-62,105,39,127,-6,-68,23,45,24,-10, 
  /* [1][0][][] */ -21,36,-65,2,-37,32,36,27,63,-88,-68,87,51,-7,21,61,95,-27,33,70,-19,5,38,29,6,27,-21,79,28,-2,89,-52,43,81,-14,31,46,59,20,-35,-32,19,-6,-60,-27,41,-8,-24,-11,-56,92,66,21,62,-76,-24,-11,95,51,76,-30,97,-32,-73,-39,38,63,41,127,35,26,26,-70,79,-36,39,64,-25,-22,42,-48,74,-22,-73,33,99,-36,-39,77,67,49,0,81,98,33,13, 
  /* [2][0][][] */ 11,44,-68,73,-14,-102,77,89,-106,88,-40,106,113,-14,71,-117,-61,-21,54,106,-91,-25,104,10,-37,78,98,2,-69,109,81,110,-58,-16,-113,-85,-86,88,101,-33,-116,-76,6,-5,-95,127,-31,-91,104,52,120,-81,-35,71,25,24,-102,94,-71,-5,-10,54,-28,94,105,47,37,80,-92,62,6,-76,34,-82,0,26,-33,-31,-3,7,41,-97,2,-31,0,-108,-19,-21,95,119,-24,49,-49,-96,-15,-78, 
  /* [3][0][][] */ 112,26,31,-30,-75,58,-99,83,21,9,81,-3,116,105,64,13,119,51,-28,-11,126,-75,-48,-98,-31,-78,-72,103,65,-101,100,10,-28,-32,-44,-29,-83,-9,101,67,-17,-68,-100,23,53,47,-39,-59,82,-83,14,36,106,-5,70,-97,-122,-82,-103,-36,-88,34,19,56,37,-29,-53,-3,6,-76,25,127,36,-107,59,-39,47,101,102,-90,-86,-100,55,113,34,73,-20,-112,-60,26,1,-108,109,-52,-100,18, 
  /* [4][0][][] */ 63,100,-12,63,-30,-83,34,21,69,91,1,31,44,-38,-14,-58,-44,6,-89,59,106,-93,74,25,-26,-2,61,-76,-69,57,-72,-18,70,127,6,-106,-66,4,-103,53,-39,-59,-80,-98,42,117,45,44,31,-90,-14,-59,-82,65,-74,19,30,-84,-15,17,15,-82,-17,-44,-35,70,-3,-25,26,-98,-110,-83,-57,33,78,43,88,-37,-6,-55,21,-56,-105,-3,3,72,88,26,-115,-62,51,106,34,115,-82,-36, 
  /* [5][0][][] */ 68,-52,58,64,29,-127,19,53,79,-93,-2,-27,42,68,18,26,41,27,-47,30,30,39,15,-17,-85,-35,-10,-52,41,1,16,-87,-42,-5,-43,17,-76,-33,49,17,-67,-29,40,62,-38,12,14,-26,-82,75,34,5,37,-1,-3,-6,50,41,-26,-28,24,-28,9,-72,-31,62,-15,25,47,16,81,-36,-23,30,-33,-39,-6,-29,11,64,62,38,32,72,-55,51,2,17,50,-68,91,17,-9,10,49,-26, 
  /* [6][0][][] */ 2,-29,86,46,-38,-40,-4,46,-10,-49,-1,-37,51,38,82,-63,49,20,23,127,-69,-92,91,42,-17,-60,-2,-27,4,-26,52,-40,-91,-100,-28,-37,14,33,-81,55,70,43,35,0,-88,105,-67,-25,-76,62,-9,-25,77,-34,94,-33,14,10,-51,101,-84,32,40,-20,-18,66,76,-49,93,18,-79,-16,50,-53,-62,-26,-33,-70,-43,-26,46,-8,17,-15,-39,-72,-30,-55,66,94,65,16,-44,-55,90,8, 
  /* [7][0][][] */ 93,62,-28,-41,-21,127,-17,6,78,1,-71,3,53,-69,32,61,46,8,-18,63,34,26,-3,64,-56,77,26,38,-59,80,-21,19,10,17,55,93,-79,69,-8,-18,72,-58,68,60,40,-2,80,-81,35,-45,-119,-59,-18,60,12,6,108,-65,14,-36,-2,-11,101,-100,-49,-43,50,18,-84,19,54,67,63,20,45,47,-50,44,-76,29,68,-27,-30,-61,65,36,-87,71,55,-1,82,16,-47,-34,-16,-43, 
  /* [8][0][][] */ 13,18,-44,-88,76,24,-65,-41,11,46,47,113,-7,-38,-81,-46,-57,101,-61,50,22,-21,82,110,-98,103,48,80,-53,70,-81,127,69,-31,58,1,123,14,-46,65,87,105,-99,-106,-5,-14,-7,103,13,-49,-70,24,-51,2,-14,-114,33,115,-102,114,107,51,44,105,-25,-25,-16,82,-71,58,17,2,73,73,-13,22,-24,104,81,54,50,85,-125,-72,35,38,74,-14,34,-28,-102,97,-62,-74,-43,61, 
  /* [9][0][][] */ -3,13,113,38,114,24,-30,-107,34,49,5,39,-80,-66,-69,-4,14,10,-117,-55,-10,89,-78,-78,127,5,-1,18,-20,-19,-76,69,44,7,37,-8,-49,26,-53,-29,50,-47,60,-59,93,20,-64,52,42,17,-91,-57,43,-62,-18,70,88,-57,7,11,-84,88,115,-71,-78,8,95,34,-35,89,73,-82,10,89,-62,-67,-74,-82,-23,94,32,31,62,11,-26,-63,34,-14,67,27,-25,45,80,-26,24,-26, 
  /* [10][0][][] */ -51,71,75,-52,-6,40,88,31,25,15,25,-44,125,72,-36,16,-26,54,-77,-67,-5,25,49,-54,3,60,-90,-87,-26,78,-73,-85,78,74,81,62,-31,1,-11,35,-32,101,-91,-26,-91,-41,-3,-51,3,13,25,9,60,2,-71,-30,-127,5,37,-32,8,57,109,11,90,-56,-76,-6,10,-16,-60,-39,80,23,-98,92,3,52,57,16,60,11,57,96,-81,61,89,-8,35,-1,8,-92,-33,-38,-39,-54, 
  /* [11][0][][] */ 113,7,-7,102,111,105,68,50,122,93,-56,115,-41,-69,67,-40,-34,-97,85,38,24,81,35,-53,-88,-91,2,77,73,-23,45,7,-49,-51,97,40,-47,82,23,-35,3,97,-66,35,-3,-52,-60,-58,88,90,95,99,-89,-42,14,27,59,-46,-42,-64,-87,81,75,-9,15,87,-22,24,127,49,-66,-70,21,122,-34,52,-84,49,-23,87,-76,-36,-56,-32,70,-53,21,-17,-70,4,-19,-109,-73,46,-50,-37, 
  /* [12][0][][] */ 27,63,-45,16,69,-68,-20,52,-51,27,-2,21,6,23,43,-66,-91,-24,-36,-95,42,0,21,93,-87,-28,99,-81,93,15,-19,113,-68,-50,-44,-1,-19,-64,19,52,103,44,-93,-37,-29,-63,-30,103,-29,-127,-36,98,54,14,-97,95,-51,-33,41,61,71,64,8,64,92,38,-32,124,29,104,56,80,86,83,-55,5,-13,30,-91,-72,-45,105,67,33,-27,38,59,114,-64,-85,97,64,105,0,50,74, 
  /* [13][0][][] */ 107,-60,100,110,74,103,88,60,75,-112,20,-51,127,78,63,-50,-118,-62,-72,37,89,-19,119,-41,-80,55,15,13,-83,-83,82,56,84,111,-24,18,-96,-29,29,82,-62,87,-74,3,-51,23,-1,-42,65,64,-26,-96,-100,39,85,-58,-70,37,7,-72,-7,91,-54,32,-58,-59,-85,110,-53,-31,114,22,-79,29,-69,-36,-87,67,88,-58,50,-89,124,36,-83,-88,104,124,4,-54,-40,100,127,-35,71,-31, 
  /* [14][0][][] */ -30,3,99,50,43,63,31,-41,-39,15,75,45,-59,-12,22,-38,22,-15,21,-14,-24,70,46,90,-25,-44,10,46,-67,-125,-24,-8,71,16,19,43,114,127,38,-55,54,-36,87,124,117,-59,75,14,98,4,9,21,52,-15,30,22,43,-15,34,97,-27,-1,-3,16,-66,8,100,-74,-37,-40,-54,76,10,92,96,-7,8,-5,73,59,63,-13,-78,-49,-16,-5,-50,43,86,25,55,-96,57,66,-44,55, 
  /* [15][0][][] */ 49,-26,-30,77,109,-81,63,-71,66,4,-57,40,105,7,-84,-82,90,4,-97,-8,55,27,72,104,91,75,41,98,45,40,71,-107,-28,6,-53,-16,-53,109,127,-52,20,113,-28,-19,20,-66,-27,-56,-22,-43,-5,42,-68,-91,-50,3,39,69,-31,115,-28,-50,9,65,-55,96,-58,14,-56,23,63,-42,27,-20,31,-95,-14,54,104,70,-68,74,-90,-46,-103,-19,-75,38,87,61,-112,-71,72,121,-103,124, 
  /* [16][0][][] */ -48,5,75,-52,20,68,-58,24,47,32,-104,50,-12,-50,-51,-66,79,78,51,72,95,57,-44,28,-56,30,-71,42,-98,5,26,18,-103,79,34,67,-42,49,-61,-68,17,-51,69,62,52,80,90,-16,-58,-97,39,66,-40,127,52,47,28,81,57,-3,101,94,23,58,64,4,-43,76,43,93,-37,-17,14,78,51,61,-20,71,-103,5,6,-79,50,1,-1,69,75,5,64,15,2,120,56,-29,-45,49, 
  /* [17][0][][] */ 33,-85,33,62,-15,-97,-44,-80,32,-52,75,45,91,47,-91,48,17,51,88,121,-75,-10,11,-35,47,59,-52,25,76,6,-30,87,-12,-11,11,-6,-30,75,-83,-14,-69,-26,-20,-7,-1,23,67,-98,73,105,-18,29,-5,72,101,-67,-127,67,-82,-80,25,-76,77,109,-64,-44,36,-66,-103,-6,79,17,18,-96,-83,59,116,-39,39,-38,22,-10,-71,-53,-81,61,63,-3,9,68,-69,-42,-14,74,15,-13, 
  /* [18][0][][] */ -110,80,108,-42,16,82,-49,-27,17,115,-62,-10,-83,43,100,-16,41,29,22,39,54,-9,42,-18,89,-69,8,87,8,51,9,63,41,1,-22,-28,37,54,-51,37,13,13,-22,40,-12,24,42,14,41,-11,31,43,-101,7,47,61,11,-4,-25,-64,49,127,-33,34,-12,-62,19,34,52,-60,-81,64,-73,17,21,-49,33,82,19,-20,-4,-5,-45,-70,116,-24,64,52,-82,-19,-63,111,59,-72,31,-48, 
  /* [19][0][][] */ 36,34,68,43,43,-4,103,100,82,-62,45,-35,-108,39,-28,66,75,-87,108,55,-19,83,-44,29,96,-65,38,-68,-87,-127,-53,76,105,-60,22,-18,12,-43,-37,-76,60,-94,-81,28,-46,39,87,-73,6,18,-59,69,-46,27,25,-12,51,91,-11,-10,46,-62,122,74,-61,11,-12,13,21,42,59,-36,-54,-74,25,-70,-5,-95,27,97,70,-111,-37,84,-63,18,16,11,84,37,-2,107,-23,124,58,-65, 
  /* [20][0][][] */ -18,58,86,81,-71,118,23,48,18,18,-70,3,-5,76,43,-62,-34,-23,-45,-41,25,-27,-53,-51,79,-66,-72,61,28,-15,-29,73,100,36,3,43,45,-33,-27,-85,-73,-26,-70,-81,-23,-58,-65,94,57,-108,-75,14,52,84,56,8,109,53,127,71,94,-39,-77,-6,-22,-58,-30,16,-95,-60,-35,65,-41,-80,46,31,82,76,97,90,69,15,82,-24,49,95,-10,49,19,79,52,7,15,-3,-2,5, 
  /* [21][0][][] */ 92,84,68,-103,97,-101,65,9,-15,-68,-66,45,40,39,-58,-86,-95,-27,30,0,108,-46,67,-84,44,-70,-29,70,23,10,-7,-36,-3,18,-101,-90,97,88,-122,-23,-10,12,29,-18,-109,-71,-71,83,-27,-51,-1,63,38,65,-97,40,-91,61,-22,108,60,-77,33,-8,79,28,-37,-51,-96,7,64,81,36,-35,29,67,-101,-31,56,96,8,101,40,-62,18,-84,63,-75,-95,68,120,-127,-41,-65,71,-13, 
  /* [22][0][][] */ 22,-51,-63,-96,66,-86,112,57,-96,86,-80,-97,126,-116,-119,-88,42,86,-127,-81,91,-74,36,33,89,-3,-119,112,-59,-87,-66,-122,50,63,10,16,11,-20,-65,-120,-1,-13,7,102,54,-120,90,-26,-67,-77,-11,-28,-24,-102,-51,32,-33,-34,14,-32,109,-72,-91,-125,-78,19,-115,-47,94,113,-9,-7,-69,-4,59,-81,40,-49,69,109,111,-104,-76,-127,83,84,106,-37,-57,34,-88,56,15,17,-37,105, 
  /* [23][0][][] */ 70,-75,-3,68,71,-120,4,-78,71,-79,74,48,33,-89,13,-44,59,-23,-111,86,92,-69,80,-35,-36,-23,66,6,42,35,61,-20,-46,56,13,25,64,-4,-84,10,-90,-6,22,-111,-62,-78,97,18,62,-127,-31,-55,69,-29,-56,93,-56,-8,63,31,-72,-96,-51,-8,30,35,-104,-80,24,4,92,-61,-12,-29,-59,-88,45,-29,79,110,-48,-48,35,-78,73,-3,93,-11,-69,41,98,15,99,-39,-12,103, 
  /* [24][0][][] */ -63,-42,-95,-67,-81,-10,-61,-82,60,127,81,35,82,59,-24,-106,-72,46,19,-72,83,-71,-48,-29,95,-28,71,46,92,29,9,-42,3,37,57,39,-45,-56,74,-19,-52,-94,105,14,65,-31,67,66,-89,-60,-33,36,60,82,51,-72,29,63,12,11,79,-10,35,97,-86,93,-40,-86,-81,55,-58,-32,-41,94,115,92,52,-63,-97,-69,-73,-91,-63,-106,9,65,-11,-98,21,-93,-12,-87,-17,29,-95,44, 
  /* [25][0][][] */ -54,-44,-39,20,46,-22,-52,31,28,-85,-8,0,69,9,-79,-11,-47,50,14,-106,65,66,-1,-30,-28,-18,-53,28,55,-69,17,41,110,-72,72,38,46,-59,-31,5,-67,74,-127,-7,14,7,38,22,-30,53,-60,-5,30,-45,-61,13,-11,44,-43,51,102,-1,55,39,-26,47,-1,19,-70,-39,2,-54,32,-126,53,22,60,57,23,0,27,44,-9,62,-59,-19,-56,-48,-9,-49,97,-11,-61,7,-42,-101, 
  /* [26][0][][] */ 60,-111,-20,-20,-87,-24,-10,5,-123,-119,113,97,-26,-41,3,-10,121,19,-69,-64,25,74,104,15,47,82,17,52,33,45,-91,-8,-13,-70,-126,-104,-60,82,-16,116,-105,115,52,40,-87,80,-45,104,-15,50,-27,103,28,-69,-14,-107,59,77,79,30,8,-101,97,-30,107,-17,-57,67,-98,71,104,120,94,-127,-119,14,63,-108,-94,3,-29,87,97,-62,81,10,-37,22,-75,105,25,22,-48,122,33,75, 
  /* [27][0][][] */ 20,9,-66,-90,-127,-74,-65,-18,45,94,42,-112,-29,56,81,-25,58,-17,100,-91,-94,13,-30,-20,-106,47,-110,-10,55,20,-38,-12,61,71,-93,-91,-97,-63,-114,97,-93,20,27,14,98,24,71,98,91,71,49,-80,-91,-83,-12,-37,122,-21,-114,-76,-59,-67,-26,40,33,-43,-109,115,47,8,-116,9,63,-56,-18,-86,46,-68,92,108,85,-32,109,-54,-75,-75,-32,38,-50,-4,-28,-64,52,23,84,50, 
  /* [28][0][][] */ 83,9,104,58,-94,-108,-57,-83,-14,-17,76,88,-56,-55,24,111,98,127,-111,78,-5,44,-73,-33,-115,90,-37,-29,-41,-97,9,11,-59,31,121,60,30,-81,-84,50,110,62,-79,58,-74,-1,28,57,46,-34,-108,-1,-99,36,62,46,24,7,87,66,17,-43,-60,34,50,85,8,91,-61,39,-66,-9,79,48,33,-65,-74,-32,-50,45,-43,-61,105,-7,71,-70,78,-46,-78,-52,-11,-19,-16,64,-100,-65, 
  /* [29][0][][] */ 48,65,47,-60,-72,4,-119,42,84,-12,-84,-89,114,-101,-52,-41,-89,88,38,-66,-83,-40,51,4,-33,15,-49,-34,-95,1,101,3,37,0,-91,-30,-6,100,33,88,47,99,-31,93,1,113,-52,-22,10,13,34,-81,74,-97,109,22,-101,58,-83,109,-124,116,-63,-52,-45,-56,43,81,127,-66,26,-78,102,89,62,24,115,-63,-33,27,-1,-87,-25,-67,64,114,41,81,-39,94,61,71,-103,24,0,65, 
  /* [30][0][][] */ -41,-16,55,35,-12,68,9,-7,70,60,57,-9,-97,16,110,27,28,46,56,-61,8,-12,-26,77,-37,40,-18,125,3,-85,-42,-11,11,-39,-14,-21,64,8,-15,12,84,-17,15,127,116,-12,66,73,24,49,-10,-62,50,-53,41,62,2,-59,-42,-11,-88,16,-51,-31,-37,-31,2,36,-51,55,29,-24,-30,67,49,10,-28,16,2,9,50,22,-84,-35,-27,47,-55,57,-14,-48,46,1,-41,-18,-22,-73, 
  /* [31][0][][] */ 59,-55,42,85,39,74,-32,-86,-13,20,-50,-51,52,-83,-2,93,-30,-25,0,12,51,45,-5,100,54,-95,40,45,-72,-89,46,73,2,26,-49,37,127,-6,-75,-76,72,-39,28,61,59,-33,-11,32,56,8,76,-33,-108,-26,-24,21,-34,48,3,98,-24,13,52,-49,45,95,-15,-54,27,-55,-90,8,-67,-34,43,18,-66,-6,49,115,-47,-29,31,51,64,82,-61,17,18,-21,-57,-69,9,63,-26,13, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019278480904176831, 0.0025103774387389421, 0.001875260379165411, 0.001944050076417625, 0.001857470371760428, 0.0028100218623876572, 0.0024149080272763968, 0.0024012597277760506, 0.0019511546706780791, 0.0023011793382465839, 0.0022931089624762535, 0.002081994665786624, 0.0020981540437787771, 0.001873611006885767, 0.0029500739183276892, 0.002021219115704298, 0.0021751818712800741, 0.0024456861428916454, 0.0025627315044403076, 0.0019855278078466654, 0.0022307340987026691, 0.0019751610234379768, 0.0017679132288321853, 0.0021480971481651068, 0.0019764380995184183, 0.0028678739909082651, 0.0017986245220527053, 0.0018240464851260185, 0.0020744758658111095, 0.001906869700178504, 0.0028231428004801273, 0.0023771505802869797, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1546, 3406, 6320, 1575, -2728, -3101, 16177, 1676, 2156, -1621, 7072, -423, -7627, 2069, 8992, 4432, 9165, 4381, -3730, -2912, 3260, 19204, 14057, 14311, 1157, 841, 4763, 2388, 2066, -3428, 5033, -1515, -143, 3062, 67, 796, 7695, 3717, -1439, 5499, 6351, 4342, 3341, 12227, 4048, 3217, 1504, 8259, 3352, -4398, -4418, 354, -265, -1023, 1460, 20, 434, -691, -4305, 7218, -708, 1179, -809, -1414, -3808, 5296, 21145, 1960, -2058, 565, 1315, 1928, 1467, -822, 576, 9349, -458, 11661, 13744, -647, 7377, 1359, -356, 978, 11883, 7213, 3976, 1020, 5118, 3861, -192, -5643, 784, -1424, -1349, -1483, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00038759168819524348, 0.00045928923645988107, 0.00038463022792711854, 0.00057478842791169882, 0.00039663870120421052, 0.00046362218563444912, 0.00020513102936092764, 0.0004027278337161988, 0.0002882341796066612, 0.00038315408164635301, 0.00028111471328884363, 0.00025314689264632761, 0.00032251130323857069, 0.0013652264606207609, 0.00034652152680791914, 0.00026538208476267755, 0.00020360344205982983, 0.00032711162930354476, 0.0005260016187094152, 0.00056850776309147477, 0.00018500965961720794, 0.00014011334860697389, 0.00021796912187710404, 0.00011892191832885146, 0.00021156737057026476, 0.00055986864026635885, 0.00062348210485652089, 0.00045172651880420744, 0.00025938675389625132, 0.00057328358525410295, 0.00028448205557651818, 0.00048610393423587084, 0.00027511536609381437, 0.00036851712502539158, 0.00034773559309542179, 0.00029828434344381094, 0.00025328953051939607, 0.00028821665910072625, 0.00041599193355068564, 0.00031948549440130591, 0.0002065230073640123, 0.00059354375116527081, 0.00044895531027577817, 0.00019177969079464674, 0.00048106073518283665, 0.00029879267094656825, 0.00034104494261555374, 0.00026415043976157904, 0.00040806640754453838, 0.00029330875258892775, 0.00035676790867000818, 0.00029819156043231487, 0.00062376336427405477, 0.00029997635283507407, 0.0005576438270509243, 0.000587654416449368, 0.00043148625991307199, 0.00039314856985583901, 0.00035619948175735772, 0.00025677055236883461, 0.0010969704017043114, 0.00053624942665919662, 0.00032251322409138083, 0.00054382078815251589, 0.00048961566062644124, 0.00036314691533334553, 0.00010344162728870288, 0.00021260647918097675, 0.0005559945129789412, 0.00057123042643070221, 0.00030681339558213949, 0.00026877925847657025, 0.00089976168237626553, 0.00046185127575881779, 0.00043090712279081345, 0.00022868979431223124, 0.00030184700153768063, 0.00015941885067149997, 0.00013336347183212638, 0.00029656337574124336, 0.00019895666628144681, 0.00025578530039638281, 0.00022098631598055363, 0.00023749280080664903, 0.00015174705185927451, 0.00032979878596961498, 0.00057849020231515169, 0.00029199768323451281, 0.00013636088988278061, 0.00052763003623113036, 0.00033545834594406188, 0.0003521348990034312, 0.00030696793692186475, 0.00071903754724189639, 0.00046737986849620938, 0.0002541873836889863, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -8,111,-17,-127,-26,-42,-10,-34,5,2,-30,45,6,-37,7,66, 
  /* [1][0][][] */ -32,37,-59,-9,-34,-39,37,-88,50,52,-68,10,1,-10,50,-127, 
  /* [2][0][][] */ 7,-13,-63,24,8,15,-51,-68,127,-54,-15,17,-8,127,-28,25, 
  /* [3][0][][] */ 47,-51,-6,-88,9,-33,-4,8,89,-1,46,27,9,51,33,127, 
  /* [4][0][][] */ -81,37,23,27,23,-17,-2,60,14,7,15,-5,-127,0,-20,34, 
  /* [5][0][][] */ 40,80,122,-36,-21,62,-106,127,-81,51,-53,-12,73,-47,-113,10, 
  /* [6][0][][] */ 71,-45,100,-127,34,-22,-25,85,-88,-108,24,-18,-1,86,-13,84, 
  /* [7][0][][] */ 48,127,-40,-49,100,14,9,-48,125,95,-56,9,50,-12,61,17, 
  /* [8][0][][] */ 20,-56,8,-103,22,-61,27,-54,34,51,62,-4,6,127,95,70, 
  /* [9][0][][] */ 12,-45,2,127,44,-22,30,-56,-48,122,18,-19,-3,-68,-19,7, 
  /* [10][0][][] */ -32,26,-41,-127,37,12,4,50,55,-44,9,-46,-46,-66,-32,47, 
  /* [11][0][][] */ -2,28,17,-9,85,-34,97,-65,-96,47,-11,19,-13,127,-75,-47, 
  /* [12][0][][] */ 40,50,-127,-67,6,-60,79,40,-7,-16,-116,-96,-44,67,41,41, 
  /* [13][0][][] */ -29,7,-34,12,3,-127,9,15,8,-20,1,-11,14,-15,6,15, 
  /* [14][0][][] */ 52,-31,79,-11,69,0,-127,-108,-17,-34,8,15,50,-53,-26,-26, 
  /* [15][0][][] */ -76,27,-7,-55,7,3,127,59,-29,29,60,-9,-3,71,41,26, 
  /* [16][0][][] */ 22,108,127,74,-15,5,94,69,-122,24,-61,15,-13,3,51,-78, 
  /* [17][0][][] */ -38,-90,-20,26,-64,-26,-43,13,-127,-37,11,-51,-17,45,66,-40, 
  /* [18][0][][] */ -13,44,15,82,44,20,17,-1,92,53,-36,-39,29,127,80,5, 
  /* [19][0][][] */ 39,-16,11,31,45,-1,-57,-52,-109,-52,-32,-127,-32,-21,35,-41, 
  /* [20][0][][] */ 85,-33,-55,-63,-9,-127,-25,65,-46,4,-112,32,-5,11,48,4, 
  /* [21][0][][] */ 85,8,80,-46,-12,-19,20,94,7,-106,31,127,-64,66,40,18, 
  /* [22][0][][] */ -10,60,-53,113,-52,-26,127,51,-40,12,-49,10,-9,15,45,19, 
  /* [23][0][][] */ 84,-15,124,-124,49,-46,17,9,-20,37,41,-56,9,-31,-127,62, 
  /* [24][0][][] */ -127,45,0,-3,7,106,38,-32,-22,13,125,-29,-89,34,49,-31, 
  /* [25][0][][] */ 12,20,10,18,13,10,73,-38,-4,-127,-19,-31,-21,-30,7,20, 
  /* [26][0][][] */ -38,-11,0,1,-54,-13,-42,-40,-117,-34,7,-39,15,127,-38,68, 
  /* [27][0][][] */ -16,41,16,80,48,-25,-22,-22,54,16,-20,4,-8,127,-13,7, 
  /* [28][0][][] */ 41,70,43,53,127,-29,52,38,-101,-43,-62,-28,31,118,34,0, 
  /* [29][0][][] */ -3,-3,-12,11,16,1,23,23,-26,-19,-18,-127,-1,-7,-6,-9, 
  /* [30][0][][] */ -7,102,-42,94,-33,-25,35,-127,-55,80,-23,9,77,33,101,85, 
  /* [31][0][][] */ -43,-38,-20,-69,-18,-1,-46,-78,26,60,-29,-127,-18,-27,8,22, 
  /* [32][0][][] */ -122,-60,-9,56,62,34,-2,27,-1,-52,-127,55,65,12,55,80, 
  /* [33][0][][] */ 10,-31,-34,-16,-82,-25,-63,8,45,4,0,-38,21,-89,127,10, 
  /* [34][0][][] */ 41,-8,71,18,48,20,-50,97,-78,-53,67,26,-1,-8,-19,127, 
  /* [35][0][][] */ -42,38,-56,30,-2,-9,17,-124,73,98,-58,20,12,-8,59,-127, 
  /* [36][0][][] */ -23,9,16,127,15,11,86,13,8,44,6,-11,-7,5,-46,-56, 
  /* [37][0][][] */ -11,36,9,-66,13,-10,-13,-25,-79,-6,-12,-23,-32,-127,93,-72, 
  /* [38][0][][] */ 63,122,-9,-58,127,-16,35,-43,99,72,-16,8,12,-32,58,36, 
  /* [39][0][][] */ -29,73,-7,-127,-8,0,-34,29,42,-85,-34,-38,9,77,41,54, 
  /* [40][0][][] */ -26,-15,30,-82,-4,-7,-4,-33,-127,9,27,-39,-5,-117,69,-48, 
  /* [41][0][][] */ -8,-2,-33,-4,17,-29,33,-15,-33,13,-42,-13,-127,5,17,19, 
  /* [42][0][][] */ 103,90,-20,-8,-57,-38,-39,-39,14,30,90,-32,-67,60,90,-127, 
  /* [43][0][][] */ -20,103,-83,2,61,-4,98,-54,96,97,-53,17,18,-127,-97,-70, 
  /* [44][0][][] */ -58,-13,6,-66,60,18,-116,-127,-9,-20,37,27,-27,-11,73,-46, 
  /* [45][0][][] */ -58,66,-111,-22,56,-36,6,-51,11,70,2,-127,25,-45,76,-64, 
  /* [46][0][][] */ -5,-18,-23,-98,-25,15,8,-28,-106,-29,16,11,-14,-127,69,-25, 
  /* [47][0][][] */ 34,34,24,-20,127,-24,-30,19,-57,30,-5,30,12,10,114,-20, 
  /* [48][0][][] */ -127,-74,-18,28,52,27,-2,-15,20,-13,-107,20,62,-7,66,47, 
  /* [49][0][][] */ -21,2,95,92,121,19,73,35,-126,-68,-49,-116,18,127,0,-38, 
  /* [50][0][][] */ 43,4,-84,-1,35,-127,-32,-31,-42,4,-11,-48,46,-28,2,-15, 
  /* [51][0][][] */ 25,52,29,-4,23,-13,12,23,-127,42,-6,-80,9,-98,-10,93, 
  /* [52][0][][] */ 32,81,-3,38,49,-5,34,27,70,80,-39,-43,47,127,75,14, 
  /* [53][0][][] */ -4,-57,-28,-11,-90,-16,-79,10,44,18,2,-73,46,-110,127,9, 
  /* [54][0][][] */ 28,10,-42,18,127,86,-98,-18,-68,-7,-37,-87,-11,-21,-20,-37, 
  /* [55][0][][] */ 56,-38,-6,8,28,-41,-76,-127,-16,-66,-40,5,10,-15,17,3, 
  /* [56][0][][] */ -28,26,18,-28,-4,-26,-114,90,-15,127,-3,-8,31,30,-10,15, 
  /* [57][0][][] */ 6,13,-54,-14,-39,-67,127,89,-43,16,-31,-13,24,32,114,-12, 
  /* [58][0][][] */ 86,11,-127,15,82,82,-49,52,-108,-49,-29,42,-4,28,27,-6, 
  /* [59][0][][] */ -77,85,98,19,-75,-77,127,108,0,7,26,-19,9,13,87,-4, 
  /* [60][0][][] */ -3,-28,-59,-7,10,-127,-36,15,-17,-33,-4,-24,29,-16,3,-3, 
  /* [61][0][][] */ 42,4,35,127,68,11,47,3,-121,1,-1,56,5,14,60,-63, 
  /* [62][0][][] */ -45,127,3,-69,-35,-17,-44,61,-32,-75,-96,-63,-12,-81,-36,-32, 
  /* [63][0][][] */ -59,14,-27,127,-77,5,-68,-28,-61,-34,-37,-54,23,66,36,54, 
  /* [64][0][][] */ 16,2,-7,44,3,7,-13,69,34,-4,-30,-65,0,-127,65,1, 
  /* [65][0][][] */ 13,-30,-3,-127,28,-58,74,-34,-25,46,7,-94,3,7,40,-29, 
  /* [66][0][][] */ -9,-14,90,6,23,39,-10,102,-16,-41,97,-4,11,127,-8,52, 
  /* [67][0][][] */ 18,43,-28,-127,-14,-19,-48,29,80,-106,-51,-15,52,72,72,58, 
  /* [68][0][][] */ -11,55,127,24,13,-5,13,-27,-53,9,-11,-39,27,-24,89,-36, 
  /* [69][0][][] */ 127,50,-25,-6,-86,-42,-14,-45,-18,6,76,-65,-50,48,61,-70, 
  /* [70][0][][] */ 62,22,-74,-34,-34,12,74,127,-33,84,-70,6,8,72,-17,48, 
  /* [71][0][][] */ 5,15,-1,14,9,-68,-6,31,-38,14,-93,22,-127,-2,34,32, 
  /* [72][0][][] */ 22,26,-127,19,21,15,37,97,-31,-21,7,-13,14,15,-11,6, 
  /* [73][0][][] */ -27,47,35,-12,37,-54,-57,-127,6,-86,22,-15,28,-45,63,-11, 
  /* [74][0][][] */ 2,22,26,127,33,-2,-74,93,-46,5,-46,26,11,-89,11,-47, 
  /* [75][0][][] */ -26,10,-80,15,10,-5,38,-39,125,13,-40,-39,23,127,-52,-12, 
  /* [76][0][][] */ -1,4,3,12,7,-9,-11,66,23,-28,-30,-127,-6,-7,9,12, 
  /* [77][0][][] */ 8,0,-16,108,-61,-6,68,127,0,17,-22,70,1,3,-4,13, 
  /* [78][0][][] */ -8,30,43,-93,68,-29,-14,74,27,-60,2,-7,-10,127,-9,51, 
  /* [79][0][][] */ -7,-69,-68,-46,-74,-13,34,-71,127,25,35,68,2,45,42,-55, 
  /* [80][0][][] */ -61,-39,99,-61,36,-14,8,-81,-23,45,-31,-106,19,127,42,-77, 
  /* [81][0][][] */ -25,50,-122,19,59,-127,1,44,-21,-51,50,8,21,9,10,9, 
  /* [82][0][][] */ 127,-18,-20,21,14,-109,-22,19,-9,-21,-118,7,101,19,-9,28, 
  /* [83][0][][] */ -10,65,-118,-86,-24,-30,37,-105,76,31,-75,-89,22,61,34,127, 
  /* [84][0][][] */ -43,29,85,-10,7,-10,37,-127,-34,77,10,-50,33,33,59,-35, 
  /* [85][0][][] */ -58,127,22,-113,-64,-33,-16,4,-39,-3,-71,26,7,-7,-72,-22, 
  /* [86][0][][] */ -10,-17,-37,-6,-45,-35,127,14,13,-31,-3,-3,36,31,105,-16, 
  /* [87][0][][] */ -12,-57,-1,-127,4,-39,36,-13,11,8,-15,-109,-7,11,0,-24, 
  /* [88][0][][] */ 113,14,69,21,53,-127,28,22,-113,85,-78,-46,26,46,92,-58, 
  /* [89][0][][] */ 4,-7,-46,-44,50,-7,-21,-15,-69,18,42,-94,127,-7,24,-65, 
  /* [90][0][][] */ 30,-38,15,-74,52,-20,-57,80,69,-92,-64,-19,14,127,38,-118, 
  /* [91][0][][] */ -23,-44,-27,-57,-15,-18,-66,-103,35,57,-36,-127,-23,-41,44,35, 
  /* [92][0][][] */ -11,18,35,9,-5,-127,4,5,1,-25,-6,-5,10,-24,28,16, 
  /* [93][0][][] */ 27,-7,127,-21,-46,49,23,-11,-16,19,-77,-8,-32,-1,34,21, 
  /* [94][0][][] */ 40,2,-19,-9,32,-8,-5,-19,-21,-19,10,-61,127,-8,20,-36, 
  /* [95][0][][] */ 127,109,-2,13,-88,-41,-51,1,-19,-25,62,-39,-45,30,91,-48, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00096555944764986634, 0.0011441707611083984, 0.00095818197587504983, 0.0014318996109068394, 0.00098809716291725636, 0.0011549649061635137, 0.00051101768622174859, 0.0010032663121819496, 0.00071804237086325884, 0.0009545045904815197, 0.00070030649658292532, 0.00063063373090699315, 0.00080343271838501096, 0.0034010207746177912, 0.00086324644507840276, 0.00066111370688304305, 0.00050721218576654792, 0.00081489293370395899, 0.0013103630626574159, 0.0014162533916532993, 0.00046089180978015065, 0.00034904712811112404, 0.0005429996526800096, 0.00029625554452650249, 0.00052705174311995506, 0.0013947318075224757, 0.0015532042598351836, 0.0011253306875005364, 0.00064617831958457828, 0.0014281508047133684, 0.00070869515184313059, 0.0012109709205105901, 0.00068536103935912251, 0.00091804139083251357, 0.00086627085693180561, 0.00074307905742898583, 0.00063098903046920896, 0.00071799871511757374, 0.001036309520713985, 0.00079589488450437784, 0.0005144853494130075, 0.0014786224346607924, 0.0011184271425008774, 0.00047775715938769281, 0.0011984073789790273, 0.00074434542329981923, 0.00084960332605987787, 0.00065804546466097236, 0.0010165655985474586, 0.00073068402707576752, 0.00088877201778814197, 0.00074284791480749846, 0.0015539049636572599, 0.00074729416519403458, 0.0013891893904656172, 0.0014639511937275529, 0.0010749086504802108, 0.00097940268460661173, 0.00088735594181343913, 0.00063966086599975824, 0.0027327472344040871, 0.0013358922442421317, 0.00080343749141320586, 0.0013547538546845317, 0.0012197192991152406, 0.00090466323308646679, 0.00025769139756448567, 0.00052964035421609879, 0.0013850807445123792, 0.001423036097548902, 0.00076432648347690701, 0.00066957669332623482, 0.0022414654958993196, 0.0011505532311275601, 0.0010734659153968096, 0.00056970672449097037, 0.00075195427052676678, 0.00039714056765660644, 0.0003322320117149502, 0.00073879183037206531, 0.00049563625361770391, 0.00063720642356202006, 0.00055051600793376565, 0.00059163657715544105, 0.00037802875158376992, 0.00082158716395497322, 0.00144112145062536, 0.00072741787880659103, 0.000339699094183743, 0.0013144197873771191, 0.00083568610716611147, 0.00087723031174391508, 0.00076471146894618869, 0.0017912497278302908, 0.0011643259786069393, 0.00063322577625513077, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -10733, 20658, -12599, 2875, -3118, 9542, 23535, -45406, -4118, 22817, 23584, 13977, -7909, 23515, -7681, 9381, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0010410649701952934, 0.000412605149904266, 0.0002472143096383661, 0.00028208974981680512, 0.00042147291242145002, 0.00042672609561122954, 0.00042286922689527273, 0.00028821401065215468, 0.00035239590215496719, 0.00024851373746059835, 0.00086263858247548342, 0.00069364451337605715, 0.00043847723281942308, 0.0002080322738038376, 0.00052525289356708527, 0.00049575680168345571, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -18,-4,2,-31,24,-15,-33,-11,27,2,-2,10,-9,-10,-15,-3,5,10,-5,-7,-1,-35,-3,6,9,-1,8,127,21,-22,34,-10,-6,-2,7,8,-7,21,-38,0,-10,4,2,27,18,7,14,2,28,-6,-15,15,19,-12,-10,61,-7,15,-21,-34,-20,14,5,-17,-45,-49,-29,29,-3,10,17,-17,-15,-31,0,-32,-22,17,15,-19,-17,-26,18,9,-6,1,5,-79,3,-21,13,0,47,-27,-35,-18, 
  /* [1][0][][] */ 28,-57,-49,-68,124,-27,88,63,-48,-87,-38,-6,-1,-35,-68,37,-67,-5,30,35,36,46,-53,-36,12,-29,-65,-49,28,-25,-86,2,-28,51,1,-46,12,6,-9,39,-45,33,-60,-7,-67,81,30,25,21,-103,27,-48,-12,47,66,31,-93,-6,-35,-56,18,-27,-3,-67,-108,97,-39,-8,-24,-34,-11,21,39,-125,-36,-3,59,-79,49,-14,-12,-51,30,-31,-37,70,-36,5,13,-78,28,10,51,-17,19,127, 
  /* [2][0][][] */ -38,58,-76,4,90,80,11,77,1,-127,-6,-14,8,-18,48,12,8,-27,-58,81,40,-37,89,7,75,51,-23,-54,30,-16,76,-79,28,44,-34,56,-103,-73,34,21,47,-40,1,-6,14,-9,-7,81,-22,56,-42,-4,94,-5,-26,87,19,5,17,-30,64,37,11,-4,17,-22,-6,-4,-30,-18,-48,-34,-36,-73,3,72,95,51,8,-19,14,-55,-1,2,-35,-2,20,57,25,30,33,-45,19,-29,-30,-5, 
  /* [3][0][][] */ 33,-6,61,9,11,-3,21,-2,-11,-56,20,-60,17,32,58,99,17,-18,23,27,127,-25,53,21,49,21,7,6,28,14,23,69,-84,4,8,5,-9,-17,-9,43,-71,-30,52,30,17,43,-48,-60,-61,-2,-56,51,3,-93,-6,39,-79,80,69,45,7,90,-37,-45,38,60,6,-31,20,-35,-4,-64,60,-36,41,-10,14,-6,39,50,-23,-51,27,-8,-40,-4,23,32,15,34,13,29,24,95,46,-50, 
  /* [4][0][][] */ 20,-6,12,-25,127,28,-8,-28,-38,-51,-23,-46,-50,26,-15,40,12,-95,-43,81,-6,-8,16,-25,-6,2,38,-34,17,-10,43,-35,72,14,1,12,35,-6,7,3,-39,-4,-30,-19,14,-45,-32,7,36,18,-35,-4,15,-36,-8,-5,9,-26,-43,22,-2,82,38,12,52,44,-23,-17,-35,-17,34,58,7,-62,-48,4,31,38,66,-30,-4,-41,13,-2,-74,22,37,40,-38,27,10,-47,22,18,10,-27, 
  /* [5][0][][] */ -6,-18,-28,15,20,-13,41,-9,-26,-41,-14,-10,-5,22,2,8,-18,-11,-1,19,31,-4,-44,61,18,19,17,-102,1,23,18,22,2,9,18,-51,27,-5,-12,18,5,1,24,-14,2,8,-15,-24,-16,-5,0,-17,-6,-17,-18,-39,6,15,-24,20,73,32,-22,29,10,62,11,91,19,79,3,21,10,12,-10,73,-27,-3,11,39,2,-7,-21,39,-12,12,-14,127,6,34,-3,-4,6,27,-41,16, 
  /* [6][0][][] */ 33,-66,31,-24,-36,20,52,38,-15,10,-11,-61,-49,-10,-26,23,8,-19,-16,-8,-46,39,-7,24,-21,0,-31,-5,-13,18,16,-20,46,24,43,-31,-19,-13,-5,-58,-36,66,5,-25,1,-15,-14,22,-19,12,-25,56,-30,-44,-2,-12,9,-28,-1,-4,-1,44,34,-82,16,-29,-7,-14,-12,0,127,-2,-39,-3,-8,3,-70,-20,6,28,21,36,38,-16,-4,-3,23,10,5,-2,51,-32,-18,-12,-46,-21, 
  /* [7][0][][] */ 34,127,81,9,110,48,59,-48,-50,-31,31,-10,-22,24,9,36,6,-67,21,-3,27,-11,42,1,-28,2,4,9,5,-11,-15,12,38,-6,-29,-8,16,23,-8,74,-81,33,13,18,-17,-34,57,-26,-26,-48,54,2,19,-53,-24,41,43,22,-32,-14,-43,-38,13,-26,-73,71,-42,-93,-29,-46,18,82,-35,-30,-3,-6,38,48,16,-43,-54,-51,12,-24,4,63,-19,-11,-50,10,-39,-47,-44,-27,7,9, 
  /* [8][0][][] */ -5,-3,24,18,-115,-60,44,-23,56,77,56,-6,-30,23,27,2,-67,9,-4,5,-50,-17,-127,59,9,-43,88,2,9,7,-11,79,76,-33,45,-2,-15,-47,9,30,-17,-17,55,16,-20,-16,26,-4,-104,19,16,25,-31,-32,-70,62,-9,-61,-99,-6,5,-22,-51,-1,33,84,-4,-35,43,-35,-56,-32,31,83,42,6,-29,-42,13,26,-80,15,-38,16,3,54,79,47,6,-38,27,64,8,-1,42,16, 
  /* [9][0][][] */ -17,-104,-34,23,94,59,-45,-26,22,-50,93,75,-26,32,111,-127,-8,-55,-39,23,-23,-96,17,-11,-10,48,-18,37,-25,-7,-7,-15,23,5,-97,26,5,-1,-18,83,33,-70,-13,86,32,-13,-95,-29,12,49,-28,-105,84,39,-41,-28,-33,80,-26,-15,31,-34,-64,123,-98,-4,16,9,23,6,-87,-98,46,-12,20,58,71,-67,30,-7,6,-22,-17,46,-13,-29,27,-10,7,-48,-43,42,-41,-19,8,-64, 
  /* [10][0][][] */ -48,-33,-38,-34,-29,-9,56,-2,37,14,11,46,21,10,6,-4,3,18,-22,-1,-7,14,31,13,3,-4,10,-127,24,-52,71,-27,3,10,-14,6,2,45,3,3,11,-30,28,-46,29,4,16,9,-15,45,-38,-4,-41,-18,-3,-52,16,21,4,-41,23,15,6,17,-30,87,-9,-21,28,-23,-1,-24,-27,-8,32,65,1,43,-8,9,-15,2,-11,28,-3,-33,-7,125,3,2,29,14,21,-30,59,-40, 
  /* [11][0][][] */ -97,29,-7,5,28,-77,-10,-26,-41,-23,-5,7,14,39,-27,-20,29,-11,-63,-41,31,-37,-6,-5,80,2,95,9,-16,19,-30,8,6,7,-2,4,9,-11,22,12,-3,0,17,2,90,10,63,15,40,52,-24,22,3,-64,-7,20,-79,-15,-45,-66,15,16,-11,14,-7,-18,31,0,32,-16,-22,35,-35,15,30,-11,-6,74,-127,27,-38,-7,-66,-61,120,-11,45,0,28,46,-19,-64,-17,43,-6,-4, 
  /* [12][0][][] */ 1,-26,-70,-18,65,7,-17,-28,19,19,23,-29,16,-5,48,-14,-38,-4,-8,-21,-21,-14,-56,30,-33,50,-2,109,-24,19,-55,-8,-17,16,31,41,-22,-35,30,13,-12,-17,-22,7,-6,8,2,39,-4,1,-9,-25,13,34,-29,-27,-3,-25,19,45,-45,-16,-17,56,53,-73,11,47,-24,-127,-4,41,10,-1,5,103,-18,0,20,23,-3,19,-51,8,-11,1,1,-70,-33,0,-14,17,-33,39,-22,6, 
  /* [13][0][][] */ -69,66,20,-44,-67,4,-9,-15,-47,-28,51,-3,89,17,-64,-4,-47,23,-45,-21,5,-3,56,-93,34,32,29,20,-8,-8,-77,-123,-113,-21,38,13,-33,5,52,-41,-68,106,14,11,95,-27,-26,6,83,-45,33,75,72,-67,76,-32,-39,49,21,-1,-21,67,-6,9,-16,-26,-11,3,-7,6,54,-127,-11,-15,-123,-23,50,23,-79,-41,91,-48,30,-47,46,-37,107,11,-33,-32,-29,28,64,-79,-40,19, 
  /* [14][0][][] */ -23,22,-1,-47,46,8,-11,41,-102,19,24,39,-10,-72,-78,-19,-80,-19,58,6,23,3,-1,-94,-28,14,-64,-22,4,-29,-21,-39,-75,-27,20,-1,-28,14,22,14,-6,88,-85,-13,-68,19,20,34,127,-40,41,-7,53,52,-92,24,-44,41,-92,19,10,7,54,29,-13,17,-9,14,-55,34,76,31,38,-7,-18,14,69,-89,-13,-123,12,-39,13,32,26,-58,-48,-2,-55,25,36,50,8,27,10,-10, 
  /* [15][0][][] */ -25,-76,15,-46,21,20,-5,-84,-35,8,-8,-30,50,-14,29,-15,-107,-3,-5,3,-30,19,-61,-41,-21,-7,-5,14,-20,-8,58,-92,-7,39,29,2,-10,15,-97,-10,21,-71,0,28,-31,-58,68,29,53,4,10,-127,-13,39,-3,50,42,-22,-32,42,8,-14,49,6,3,-17,-14,-26,-36,32,10,52,-42,11,-8,-45,-33,-11,-7,24,-12,44,8,63,1,-41,-38,-31,-34,71,9,72,-48,-10,-19,-4, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.044245257973670959, 0.017535718157887459, 0.010506607592105865, 0.011988813988864422, 0.017912598326802254, 0.018135858699679375, 0.017971942201256752, 0.012249095365405083, 0.014976825565099716, 0.010561833158135414, 0.036662138998508453, 0.029479891061782837, 0.018635282292962074, 0.008841371163725853, 0.022323247045278549, 0.021069664508104324, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 22111, 62317, -2549, 76, 17342, -4806, -1566, -1169, 7624, 11203, -4888, -78, 1135, 5160, 4848, -9406, -3739, 223, 303, 13021, -11338, 20510, -1805, 11601, 31215, 997, -4788, 17732, 13472, -20324, 1843, 20673, 24065, -9101, 2697, -817, 317, -937, 3922, -8414, -5281, -1566, -7167, 20, 29638, -1444, 12721, -718, -14204, 1615, -71, 228, -2692, 20544, -4317, 14721, 18997, -228, 37864, -473, -8741, -899, 1832, 739, 610, 16155, -1982, -5363, -4442, 3656, -993, -4820, 137, -366, -2462, -4498, -21, -1681, 50103, -4857, -6899, -10814, 275, -227, 79923, -14738, -9091, -27348, -7599, 9065, -2535, 36535, 512, -3834, -3965, -352, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.0001013351502479054, 9.0646615717560053e-05, 0.00012008579506073147, 0.00020107284944970161, 0.00018132379045709968, 0.00018170905241277069, 4.452991925063543e-05, 0.00010007236414821818, 0.00023987768508959562, 0.00021966722852084786, 0.00023433436581399292, 0.00011323155194986612, 0.00025298292166553438, 0.00020151982607785612, 0.00036926264874637127, 0.00018213196017313749, 0.00022807969071436673, 0.00019943802908528596, 0.00016097404295578599, 8.02061622380279e-05, 7.1254660724662244e-05, 5.3114774345885962e-05, 0.00013722559378948063, 6.6687745857052505e-05, 9.4616960268467665e-05, 8.496776717947796e-05, 0.00019075188902206719, 0.00017481388931628317, 7.0746122219134122e-05, 0.00042730019777081907, 0.00040312268538400531, 0.00023434565810021013, 0.00011113199434475973, 0.00017966967425309122, 0.0002038911625277251, 0.00045160349691286683, 0.00044230697676539421, 0.00017178691632580012, 0.00027946976479142904, 9.7084703156724572e-05, 0.00024071962980087847, 0.00019286152382846922, 0.00035154062788933516, 9.2493348347488791e-05, 0.00037894761771894991, 9.0226989414077252e-05, 9.7195159469265491e-05, 0.00026281955069862306, 0.00073327322024852037, 0.00011405963596189395, 0.00044373454875312746, 0.00014084983558859676, 0.00017548343748785555, 0.00013521764776669443, 0.00019859630265273154, 0.00012179101759102196, 0.0001482368097640574, 0.00036757337511517107, 4.0946040826383978e-05, 0.00015227064432110637, 0.00027759801014326513, 0.00031128758564591408, 0.0001221624988829717, 0.00013214770297054201, 0.00014514171925839037, 0.00010940209176624194, 0.00024734047474339604, 0.00041368266101926565, 0.00019140505173709244, 0.00011089408508269116, 0.00017803948139771819, 9.7122494480572641e-05, 0.00029254885157570243, 0.00013799426960758865, 0.00028236530488356948, 0.00041113802581094205, 0.00011244706547586247, 9.1768073616549373e-05, 5.1608221838250756e-05, 0.00026655869442038238, 0.00020050790044479072, 0.00022836227435618639, 0.00015025305037852377, 0.0002530800411477685, 4.5297510951058939e-05, 0.00010057490726467222, 6.6317144955974072e-05, 0.00048019143287092447, 0.00022294660448096693, 0.00011227231152588502, 0.0003309571766294539, 2.7990437956759706e-05, 0.0001662073191255331, 9.4055692898109555e-05, 0.000277054583420977, 0.00030971405794844031, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -44,-73,-5,127,22,76,84,-60,-19,-18,-15,-6,-30,1,38,2,-10,-42,26,23,16,-127,127,9,-69,8,51,-28,-127,-127,39,27,12,26,58,-18,-30,-10,32,-12,-9,28,-108,68,24,-68,36,45,-18,53,-20,20,1,-7,19,48,-92,-49,-58,-18,-10,1,12,37,62,-25,74,14,-3,15,21,127,24,22,27,0,-12,16,127,-5,-12,10,-28,21,127,20,-79,-17,-4,-31,-15,-36,0,-25,-18,29, 127,-127,74,106,-43,127,48,-115,67,4,-17,127,127,-99,-14,17,10,127,125,-108,127,-73,76,68,-127,-120,-68,-34,-55,44,-59,-19,-92,48,-127,-84,-44,-13,-52,61,3,127,127,76,-49,-112,-114,-51,-16,-127,46,84,69,-34,44,81,-48,42,-75,-114,-44,-42,-60,69,68,-60,29,30,-78,30,-16,93,122,127,16,19,2,60,-32,53,66,127,127,-23,-8,70,-113,127,-121,-101,3,-127,-91,-127,-38,109, -73,-12,31,-82,14,-41,69,-6,77,-36,-27,18,-22,-4,-8,-10,-10,-20,8,-2,-26,-113,30,-4,-107,97,13,-54,117,48,-14,12,-1,11,12,-25,-10,37,18,15,24,14,-118,62,18,-17,40,13,-15,13,-15,4,-5,1,-3,20,-67,6,-31,56,2,42,37,0,-7,-39,-31,25,12,2,-1,38,13,-26,-5,2,-9,-7,-82,0,-21,-23,-21,5,-121,9,-36,-23,-48,26,-26,-28,31,-24,-14,3, 
  /* [0][1][][] */ -62,-74,71,-37,-48,101,21,127,-56,-21,0,-122,26,-113,79,32,-6,-62,-18,86,53,-74,45,54,-100,-13,127,-22,-23,66,121,-103,-127,93,-87,-57,-36,30,-27,99,-46,-24,-6,49,-48,127,-25,64,15,96,21,-2,12,-54,29,30,127,124,-73,-84,127,-33,-35,127,67,-38,-13,-2,127,36,127,95,-37,102,-4,13,12,12,-30,8,-41,127,-84,109,3,34,-61,30,74,-127,-31,-6,127,-66,-24,3, 67,126,55,-114,127,85,82,42,-127,127,127,-43,-68,-127,-127,127,127,-63,-127,-51,102,101,-119,127,-108,-91,-42,127,-124,109,-127,-127,-88,127,106,127,127,-127,-105,127,-61,-94,108,-127,-127,-35,-127,-127,127,-111,87,44,127,127,127,-127,100,-127,-127,127,16,-79,-127,-103,-127,127,-127,127,-120,-127,-104,-85,-127,-78,127,127,-127,127,-78,127,127,27,-45,-127,62,127,93,46,127,15,127,1,-69,41,127,-127, -51,-12,-44,38,-57,-102,36,-24,17,-35,-28,96,-1,91,15,12,-6,63,-8,125,1,-90,-41,8,-62,109,-73,-20,-70,-18,16,-59,-72,36,5,-14,-30,48,-66,45,127,-3,-40,29,-39,-59,20,44,8,121,-11,8,-38,-74,6,18,95,2,-2,25,-37,127,93,-54,-43,12,38,-9,-78,120,-16,-83,0,-54,-15,-19,27,16,72,-38,-69,-45,57,16,-52,-11,75,22,16,64,-45,18,-43,104,-26,-4, 
  /* [0][2][][] */ -70,1,-5,-23,14,-40,65,28,53,-28,-36,-3,19,18,-28,3,-8,70,5,-4,-57,-88,1,-6,-32,-55,33,-72,89,40,26,25,17,-9,-10,-47,-5,33,-4,-1,-14,-6,-68,111,3,31,9,36,-15,-33,9,-21,15,-3,14,15,-66,23,-20,14,15,0,-26,-3,0,-47,-46,13,-33,15,25,29,15,-18,24,8,17,3,-81,-12,-5,-7,16,14,-127,7,13,-43,-63,-54,-27,-52,9,63,-19,-5, 120,32,-127,-36,-70,-21,33,35,-66,-28,-21,-110,-80,110,-13,35,1,-55,-13,-127,92,-57,-39,-1,-105,127,-47,19,-39,-19,-9,-6,-62,14,28,6,-24,-32,127,60,10,-16,67,-32,-36,74,-71,-45,-33,-6,-127,-127,-55,-26,5,38,-66,-9,5,40,-8,-17,6,-48,-51,33,64,-25,118,110,-22,-73,13,-55,3,1,99,3,47,23,14,-100,-53,3,3,10,127,40,-63,40,-19,-109,41,85,-10,27, -53,13,-16,27,17,-73,-127,4,-13,-9,-18,3,13,-27,20,0,-9,-20,5,19,-44,-79,12,5,16,-97,19,4,-49,-37,-7,16,42,-22,-8,-24,-36,1,43,-39,20,-2,-50,-33,3,64,24,14,-9,-1,11,-9,16,4,-2,-5,-63,-12,1,-35,-16,12,86,-12,36,-2,1,30,2,7,-3,19,-16,16,1,10,36,-2,70,-13,4,-11,-8,-17,77,4,46,-39,57,42,-17,-53,-8,6,-13,-13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0043067438527941704, 0.00385248102247715, 0.0051036463119089603, 0.0085455961525440216, 0.0077062607742846012, 0.0077226348221302032, 0.0018925215117633343, 0.0042530754581093788, 0.010194801725447178, 0.0093358568847179413, 0.009959210641682148, 0.0048123407177627087, 0.010751773603260517, 0.0085645923390984535, 0.015693662688136101, 0.0077406079508364201, 0.0096933869644999504, 0.0084761157631874084, 0.0068413964472711086, 0.0034087616950273514, 0.0030283229425549507, 0.0022573778405785561, 0.0058320877142250538, 0.00283422926440835, 0.0040212208405137062, 0.0036111301742494106, 0.0081069553270936012, 0.0074295904487371445, 0.0030067102052271366, 0.018160257488489151, 0.0171327143907547, 0.009959690272808075, 0.0047231097705662251, 0.0076359608210623264, 0.0086653744801878929, 0.019193148240447044, 0.018798045814037323, 0.0073009440675377846, 0.011877465061843395, 0.0041260998696088791, 0.010230584070086479, 0.008196614682674408, 0.014940476976335049, 0.0039309673011302948, 0.016105273738503456, 0.0038346471264958382, 0.0041307942010462284, 0.011169830337166786, 0.031164111569523811, 0.004847534466534853, 0.018858717754483223, 0.0059861177578568459, 0.0074580460786819458, 0.0057467496953904629, 0.0084403427317738533, 0.0051761181093752384, 0.0063000642694532871, 0.015621867962181568, 0.0017402067314833403, 0.0064715021289885044, 0.01179791521281004, 0.013229722157120705, 0.00519190588966012, 0.005616276990622282, 0.006168522872030735, 0.0046495888382196426, 0.010511970147490501, 0.017581513151526451, 0.0081347143277525902, 0.0047129984013736248, 0.0075666778720915318, 0.0041277059353888035, 0.012433325871825218, 0.0058647561818361282, 0.012000525370240211, 0.017473366111516953, 0.0047790003009140491, 0.0039001430850476027, 0.0021933494135737419, 0.011328743770718575, 0.00852158572524786, 0.009705396369099617, 0.00638575479388237, 0.010755901224911213, 0.0019251441117376089, 0.0042744334787130356, 0.002818478737026453, 0.020408134907484055, 0.0094752302393317223, 0.0047715730033814907, 0.014065680094063282, 0.00118959357496351, 0.0070638111792504787, 0.00399736687541008, 0.01177481934428215, 0.013162846677005291, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1475, 9388, 10742, 27422, 11253, -3557, -1446, 5495, 24033, -4732, 8324, 2702, 12454, 10528, 43017, 2291, 1823, 8247, 11035, 4340, -359, 454, 12117, -1140, 3926, 25, 7671, 6440, 6347, 44657, 51800, 12462, 9162, -707, 7633, 2901, 1662, 4305, 17738, -893, 8418, 8224, 43889, -3012, 20174, 9549, 4192, 17229, 62007, 9157, -605, 7658, -4451, -307, -2400, 7850, -647, 12383, 5498, 7412, 5302, 9952, 7727, 7292, 8444, 12723, 4145, -5877, 5647, -2202, 2901, 10564, 20917, 5515, -4321, -3651, 3805, 194, 2176, -1066, 18644, 11344, 5173, 15477, 2666, 245, 9324, 62321, 9529, 9405, 5289, -361, 5025, 8654, 3961, 14680, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00027980987215414643, 0.00016351645172107965, 0.0001754181575961411, 8.4311403043102473e-05, 0.0002618868020363152, 0.00029294364503584802, 0.00053452490828931332, 0.00028680133982561529, 9.6327275969088078e-05, 0.00027679579216055572, 0.00032433023443445563, 0.00031386982300318778, 0.00010258442489430308, 0.00022035090660210699, 5.5922140745678917e-05, 0.00025198259390890598, 0.000260401691775769, 0.00015708718274254352, 0.00020562914141919464, 0.00026468455325812101, 0.00030080912983976305, 0.00067300896625965834, 0.00016278734256047755, 0.00056336045963689685, 0.00065637018997222185, 0.00026729627279564738, 0.00028755297535099089, 0.0002118546690326184, 0.00025312605430372059, 7.8910219599492848e-05, 5.4348776757251471e-05, 0.00019473870634101331, 0.00018359323439653963, 0.0003400833229534328, 0.00026433408493176103, 0.00019195527420379221, 0.00031355678220279515, 0.0003356730449013412, 0.00015315196651499718, 0.00055545457871630788, 0.00021387456217780709, 0.00019403864280320704, 6.2516606703866273e-05, 0.0003609144187066704, 0.00016103521920740604, 0.00016098814376164228, 0.00039942169678397477, 0.00015673461894039065, 6.6350483393762261e-05, 0.00022581344819627702, 0.00028512565768323839, 0.00022851990070194006, 0.00024538204888813198, 0.00023433372552972287, 0.00044929419527761638, 0.00014216557610780001, 0.00019081335631199181, 0.00014844651741441339, 0.00038072426104918122, 0.00020034547196701169, 0.00029423716478049755, 0.00013934755406808108, 0.00018915641703642905, 0.00014132287469692528, 0.00029386617825366557, 0.00015585804067086428, 0.00031925685470923781, 0.00022588815772905946, 0.00027609462267719209, 0.0003309937019366771, 0.00036937202094122767, 0.00014885593554936349, 0.00010063547233585268, 0.00018535586423240602, 0.00035687859053723514, 0.00037898265873081982, 0.00043631799053400755, 0.00035088369622826576, 0.00034487710217945278, 0.00038204097654670477, 0.0001082360467989929, 0.0001483841915614903, 0.00017037102952599525, 0.00012782234989572316, 0.00042714120354503393, 0.00027079007122665644, 0.00025025807553902268, 6.1896214901935309e-05, 0.00014592925435863435, 0.00023710835375823081, 0.00024426373420283198, 0.00035160058178007603, 0.00028513994766399264, 0.00017819515778683126, 0.00029289591475389898, 0.00011525108857313171, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 45,63,-20,51,41,8,-9,-1,0,0,-36,95,35,-85,62,-127, 
  /* [1][0][][] */ 4,25,1,-10,36,-23,110,-127,6,101,6,12,-13,-50,38,1, 
  /* [2][0][][] */ -127,53,-4,-40,-5,10,50,100,-54,19,84,-34,-37,2,46,-61, 
  /* [3][0][][] */ -74,120,78,71,-50,52,46,92,-2,82,-127,3,37,-81,-121,-85, 
  /* [4][0][][] */ 2,15,15,45,-8,44,-7,42,18,-31,4,-16,28,10,-127,-9, 
  /* [5][0][][] */ -7,-23,55,-12,0,-9,-13,37,-25,90,-24,-127,-18,38,-95,-31, 
  /* [6][0][][] */ 19,6,35,-36,37,48,-73,-74,-15,-8,38,-15,127,-35,-17,-27, 
  /* [7][0][][] */ 29,-1,127,-4,-44,-51,36,9,-68,5,-113,-88,13,-30,13,-24, 
  /* [8][0][][] */ 29,17,107,32,-51,58,-4,31,49,4,24,-106,-82,5,-127,-77, 
  /* [9][0][][] */ 43,-125,75,71,11,14,-8,23,103,27,79,15,-6,13,-127,-51, 
  /* [10][0][][] */ -2,-89,-15,-28,-127,28,25,18,59,87,65,-22,-13,39,73,-4, 
  /* [11][0][][] */ 58,-15,27,-59,4,-48,-127,-110,0,63,4,1,8,-18,48,-79, 
  /* [12][0][][] */ -35,-4,15,-62,-53,-33,-115,-27,-67,-80,-44,31,17,119,127,54, 
  /* [13][0][][] */ -44,-106,-73,17,28,-64,-3,9,66,9,-40,4,26,36,127,29, 
  /* [14][0][][] */ 22,-104,81,67,44,13,7,127,13,82,20,-65,-15,42,-50,106, 
  /* [15][0][][] */ 31,-51,2,80,26,-4,120,-1,-1,-127,15,-49,8,-12,-28,-48, 
  /* [16][0][][] */ 29,-64,-35,27,14,1,39,-71,127,44,79,14,-3,99,60,103, 
  /* [17][0][][] */ -14,-106,16,86,127,-8,42,0,70,-81,-57,-46,16,75,-56,37, 
  /* [18][0][][] */ -22,17,-25,8,-89,-40,-27,40,-47,-26,-67,-45,11,-127,66,4, 
  /* [19][0][][] */ 38,-44,40,-32,63,3,-127,51,118,-55,73,76,-42,37,51,55, 
  /* [20][0][][] */ 38,-2,87,-79,0,-22,-28,36,-33,-46,95,-18,10,-5,-57,127, 
  /* [21][0][][] */ -61,-36,-28,-29,26,12,-127,-42,-16,54,-42,21,-106,-13,73,9, 
  /* [22][0][][] */ 29,-27,21,-24,-10,-65,17,-16,-127,47,-9,-55,-18,-41,85,-48, 
  /* [23][0][][] */ 0,16,22,-10,5,15,-21,10,-7,-11,56,-4,127,-1,-7,-41, 
  /* [24][0][][] */ -38,19,29,-76,-53,26,-4,7,8,0,51,-98,-13,-127,60,-2, 
  /* [25][0][][] */ -95,-9,-111,-8,28,-38,-70,-120,-37,57,-107,-127,-52,-86,82,-43, 
  /* [26][0][][] */ -4,-27,31,-70,127,-16,33,7,65,-14,-7,-26,-26,80,-9,68, 
  /* [27][0][][] */ 112,-15,14,-38,-53,-48,2,-37,-36,20,-127,7,16,-22,9,33, 
  /* [28][0][][] */ -122,-1,-127,-120,35,2,70,-70,-15,47,-33,6,67,-32,-3,41, 
  /* [29][0][][] */ -71,-31,-12,127,-22,22,24,-41,1,5,-69,29,14,-90,43,-51, 
  /* [30][0][][] */ 38,-47,127,-47,75,88,-80,80,-41,-64,90,-16,21,39,-64,63, 
  /* [31][0][][] */ -13,-112,27,-36,9,-17,5,-32,-7,47,127,45,-39,67,54,82, 
  /* [32][0][][] */ -8,68,-39,34,-127,24,-65,-46,-53,-29,-1,45,14,41,30,58, 
  /* [33][0][][] */ 37,19,34,118,35,-15,35,-56,-127,54,60,-5,6,-3,13,114, 
  /* [34][0][][] */ 11,4,40,5,35,-28,-127,-35,-32,47,-32,4,-34,-2,-9,11, 
  /* [35][0][][] */ 94,71,-4,13,78,-127,-12,-16,-40,32,-115,-20,108,35,-16,-19, 
  /* [36][0][][] */ 25,-9,-127,-7,41,5,-20,19,-29,-13,-6,-19,11,8,-9,3, 
  /* [37][0][][] */ 8,15,127,-2,-90,17,14,-66,-40,46,-39,30,15,-30,6,21, 
  /* [38][0][][] */ -127,33,-2,30,23,87,-2,-27,-19,-12,98,-19,-50,19,-17,-20, 
  /* [39][0][][] */ -21,6,11,33,54,-34,-127,39,11,21,-6,-39,-18,-14,-17,0, 
  /* [40][0][][] */ 66,123,-64,127,-37,7,47,-26,-47,-24,-43,29,20,45,-10,24, 
  /* [41][0][][] */ 5,22,-63,-32,-50,5,104,127,-45,85,-34,15,21,83,58,-30, 
  /* [42][0][][] */ 86,-5,-48,-63,-9,-26,-40,49,81,-127,68,3,-52,15,-72,46, 
  /* [43][0][][] */ -63,10,27,-36,25,3,-49,-82,-12,34,-32,-44,-127,-1,17,16, 
  /* [44][0][][] */ 16,-19,-6,19,14,-5,1,-52,127,10,22,49,24,69,28,26, 
  /* [45][0][][] */ -114,-127,33,-86,39,-5,-20,22,15,-119,-54,-28,32,106,-83,110, 
  /* [46][0][][] */ -65,10,-3,98,-66,-8,-23,-70,-127,54,-22,-2,15,22,5,-38, 
  /* [47][0][][] */ -47,-38,-127,119,11,82,-8,-30,23,54,80,89,-65,-25,65,-42, 
  /* [48][0][][] */ -34,-24,38,-127,20,4,-45,-20,-42,24,43,4,-13,37,109,22, 
  /* [49][0][][] */ -15,-36,68,93,42,17,-77,-62,11,-103,-116,-18,-2,-24,-91,-127, 
  /* [50][0][][] */ 28,69,13,-127,79,-5,4,36,94,-26,-45,2,0,-40,4,-31, 
  /* [51][0][][] */ -4,-40,27,-24,45,-19,-63,-127,-4,-86,15,-18,8,-31,-11,-15, 
  /* [52][0][][] */ 33,46,-23,27,69,-47,-66,127,-112,110,-68,-34,81,117,31,-7, 
  /* [53][0][][] */ -31,93,13,-82,-21,18,33,-47,-40,-46,-47,50,-15,-127,-74,-23, 
  /* [54][0][][] */ -4,-3,25,32,36,-8,22,-20,4,27,-9,-42,0,127,-55,-15, 
  /* [55][0][][] */ -120,108,95,-42,60,-16,-31,22,-55,12,71,-1,0,-15,127,13, 
  /* [56][0][][] */ 88,4,16,-122,92,-12,-12,35,53,-44,25,127,-62,6,109,97, 
  /* [57][0][][] */ -34,-27,0,47,-49,13,28,127,-2,30,5,-31,27,42,1,17, 
  /* [58][0][][] */ 9,93,4,-127,4,52,-25,7,65,-22,5,75,17,-90,34,56, 
  /* [59][0][][] */ 36,14,26,-74,-40,0,21,-2,38,63,16,-103,1,-127,-71,42, 
  /* [60][0][][] */ 50,-41,109,-59,-59,127,56,7,-29,27,-34,-40,54,6,32,8, 
  /* [61][0][][] */ -59,20,-38,-36,-16,21,51,127,-7,68,-37,26,20,82,13,-41, 
  /* [62][0][][] */ 26,-28,-32,43,-127,-13,-51,-33,-48,24,-36,-52,35,-119,86,62, 
  /* [63][0][][] */ 25,-12,5,-115,16,3,-90,-127,-113,86,2,-9,48,10,42,-10, 
  /* [64][0][][] */ -29,0,41,50,56,-6,-43,-127,19,-111,1,-27,-16,-1,-3,47, 
  /* [65][0][][] */ -127,14,29,-78,27,59,38,-70,-93,26,35,-6,6,24,-13,-24, 
  /* [66][0][][] */ 38,12,59,14,-46,15,-15,29,-35,-14,35,-73,-17,45,-127,22, 
  /* [67][0][][] */ 37,-51,-31,81,92,-47,-90,-115,41,-127,-85,-38,-106,-3,-74,-7, 
  /* [68][0][][] */ 0,-29,-40,69,-47,-127,22,-72,-37,10,80,-95,7,29,104,-30, 
  /* [69][0][][] */ -3,63,-62,28,-14,-127,29,67,0,18,42,-14,116,26,-14,-7, 
  /* [70][0][][] */ -4,29,-30,-39,-27,25,127,88,-26,20,-48,30,3,51,-12,-40, 
  /* [71][0][][] */ 3,21,-50,-87,27,18,-1,62,-45,-87,-20,-8,8,-127,107,4, 
  /* [72][0][][] */ 27,25,-5,1,42,-31,-76,-127,24,64,-22,40,52,77,52,80, 
  /* [73][0][][] */ -36,-127,-25,-91,-68,-52,35,-41,-32,-2,-70,-70,23,-24,98,2, 
  /* [74][0][][] */ -26,36,59,80,11,1,-127,116,16,-49,-46,-44,8,8,-11,-10, 
  /* [75][0][][] */ -32,28,-50,12,-39,38,91,127,-10,42,6,-33,-108,76,35,8, 
  /* [76][0][][] */ 9,-25,-5,-5,39,-32,-127,-111,-8,10,20,-9,21,-17,51,-35, 
  /* [77][0][][] */ -42,7,-27,-17,-84,2,-11,-69,127,15,-55,4,-14,11,21,-82, 
  /* [78][0][][] */ -75,-127,-35,95,25,94,16,17,-15,-48,-71,109,27,-64,115,15, 
  /* [79][0][][] */ 26,-12,27,-74,127,0,34,29,106,6,-5,17,-7,-14,17,-8, 
  /* [80][0][][] */ 15,-53,88,-125,1,-49,17,24,-76,-63,-12,-86,24,127,-31,23, 
  /* [81][0][][] */ 26,-20,51,36,10,65,-21,-25,-34,-40,-5,-31,-45,54,-127,11, 
  /* [82][0][][] */ -94,-54,35,-127,-29,-70,-86,-60,-33,-38,-13,-105,15,-124,-93,80, 
  /* [83][0][][] */ -25,-22,-47,-85,-98,5,7,58,-76,-3,-5,-59,9,-127,15,66, 
  /* [84][0][][] */ 127,61,-2,16,-42,-11,-47,21,19,-21,56,-19,-49,26,78,-41, 
  /* [85][0][][] */ -19,-18,26,-21,64,12,-54,115,-86,-93,-45,-14,-29,89,68,-127, 
  /* [86][0][][] */ 5,-27,33,19,-42,65,-58,0,-91,-72,0,-1,-46,-127,-49,6, 
  /* [87][0][][] */ 104,-15,22,-16,-33,-48,4,-20,18,11,-127,2,28,1,6,30, 
  /* [88][0][][] */ 21,76,-51,-3,-10,12,-15,47,102,36,33,23,-9,-81,127,-127, 
  /* [89][0][][] */ 25,61,-84,-14,-57,-11,1,-67,24,66,66,-22,-4,-13,-40,-127, 
  /* [90][0][][] */ 18,22,-3,-39,-38,15,127,-32,92,-41,-8,-85,20,8,-46,17, 
  /* [91][0][][] */ 2,24,7,-77,-51,17,14,-40,-68,49,100,91,-17,-40,-17,127, 
  /* [92][0][][] */ 15,1,38,-3,84,-11,-58,-127,38,-77,-2,-28,7,-24,-26,-26, 
  /* [93][0][][] */ 54,-7,19,-127,-43,-8,-25,50,23,-81,70,-10,-26,96,3,47, 
  /* [94][0][][] */ -77,21,-88,16,63,-127,-33,15,-14,-33,18,-33,6,17,-22,8, 
  /* [95][0][][] */ -48,68,17,-127,9,25,-36,5,5,-59,-30,-40,22,45,-45,-28, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00091808260185644031, 0.00053651287453249097, 0.00057556352112442255, 0.00027663365472108126, 0.00085927528562024236, 0.00096117571229115129, 0.0017538266256451607, 0.0009410221828147769, 0.000316058867610991, 0.00090819312026724219, 0.0010641580447554588, 0.0010298364795744419, 0.00033658917527645826, 0.00072299211751669645, 0.00018348581215832382, 0.00082677864702418447, 0.00085440248949453235, 0.00051541783614084125, 0.00067468860652297735, 0.00086845492478460073, 0.00098698306828737259, 0.002208205871284008, 0.00053412059787660837, 0.0018484387546777725, 0.0021536124404519796, 0.00087702425662428141, 0.00094348844140768051, 0.0006951151299290359, 0.00083053042180836201, 0.0002589118666946888, 0.00017832346202339977, 0.00063895602943375707, 0.00060238671721890569, 0.0011158453999087214, 0.0008673050906509161, 0.00062982336385175586, 0.0010288093471899629, 0.0011013748589903116, 0.00050250603817403316, 0.0018224988598376513, 0.00070174259599298239, 0.00063665909692645073, 0.00020512288028839976, 0.0011841942323371768, 0.00052837171824648976, 0.00052821729332208633, 0.0013105402467772365, 0.00051426107529550791, 0.00021770218154415488, 0.00074091518763452768, 0.00093552411999553442, 0.00074979534838348627, 0.00080512167187407613, 0.00076887104660272598, 0.0014741766499355435, 0.00046645864495076239, 0.00062607659492641687, 0.00048706700908951461, 0.0012491921661421657, 0.0006573523860424757, 0.00096541986567899585, 0.00045721244532614946, 0.00062064005760475993, 0.00046369366464205086, 0.00096420262707397342, 0.00051138491835445166, 0.0010475118178874254, 0.00074116035830229521, 0.00090589246246963739, 0.0010860215406864882, 0.0012119443854317069, 0.00048841035459190607, 0.00033019448164850473, 0.00060817005578428507, 0.0011709523387253284, 0.0012434778036549687, 0.0014316004235297441, 0.0011512824567034841, 0.0011315742740407586, 0.001253512455150485, 0.00035513268085196614, 0.0004868625255767256, 0.00055900338338688016, 0.00041939719812944531, 0.0014014905318617821, 0.00088848773157224059, 0.00082112033851444721, 0.00020308731473051012, 0.00047880763304419816, 0.00077797484118491411, 0.00080145231913775206, 0.0011536346282809973, 0.00093557103537023067, 0.00058467511553317308, 0.00096101913368329406, 0.00037814967799931765, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { 3129, 12033, -1676, 22303, 27078, -1521, -6328, 4485, 17144, 9379, 25641, 25142, -11568, 17146, 34026, -17842, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00051792548038065434, 0.00037232515751384199, 0.00026744772912934422, 0.0002504651783965528, 0.00043015650589950383, 0.00037304050056263804, 0.00030326377600431442, 0.00041606431477703154, 0.00024008177570067346, 0.00020805993699468672, 0.00036964434548281133, 0.00063446868443861604, 0.00045852723997086287, 0.00046860903967171907, 0.00059395423159003258, 0.00028407800709828734, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -5,-3,-4,9,45,74,-31,-27,55,0,21,3,-9,0,29,69,-2,-9,-12,10,91,-48,8,-1,-32,-27,-47,-99,-4,-16,39,50,125,-12,8,-5,3,-27,-21,-6,-38,15,18,-39,7,-22,-21,28,-6,4,20,-13,-34,-16,-13,-3,28,29,-30,-25,-55,19,-3,11,20,10,50,6,34,21,-25,-35,-82,-15,-16,5,-13,-87,12,2,58,-30,-80,-80,38,-20,-19,31,2,28,3,-29,13,29,-1,127, 
  /* [1][0][][] */ 70,-119,39,78,-21,-51,-6,-47,2,-84,-9,32,31,-60,-18,-31,-81,2,13,5,-22,-78,-24,23,79,-69,-75,19,-18,104,-30,34,-8,-3,-53,16,-13,-28,28,-49,-15,-86,32,-32,-50,0,69,-12,50,12,24,-40,66,-56,4,-27,20,10,-22,-85,38,-77,28,-68,12,-71,20,37,46,27,-23,-21,-127,52,-7,15,33,93,16,-8,48,0,-72,-1,-76,48,-8,32,-31,-4,0,13,-10,-31,20,10, 
  /* [2][0][][] */ 21,34,8,-40,10,17,-2,53,47,-18,34,90,4,-16,53,-21,-13,-34,18,7,-25,-59,-8,-42,-2,-19,-42,37,3,27,112,-65,28,-48,-31,51,18,127,-51,-16,2,-5,11,58,-42,-57,-79,20,27,27,-13,-38,32,-7,-4,-50,-22,14,-5,33,10,3,79,113,25,-79,3,-76,-22,-12,-8,17,-41,12,-32,34,34,47,-4,4,-15,72,23,-23,-32,5,21,-8,20,8,15,-64,-45,2,3,57, 
  /* [3][0][][] */ -27,3,-31,18,21,-26,-5,-5,-5,31,-9,21,8,-12,31,-6,40,-28,0,27,-19,1,-15,15,-6,11,1,4,12,-18,41,-27,33,-4,-21,42,-10,3,7,22,14,-51,27,-3,2,3,-13,12,-127,38,-22,19,-104,-51,-12,-17,21,10,2,55,13,40,20,29,-11,-80,-36,19,63,28,19,17,-12,5,-13,-19,-25,-50,19,-40,33,-15,2,54,39,37,36,12,34,-37,-21,8,-22,0,-9,-28, 
  /* [4][0][][] */ -9,-18,5,-49,1,-18,-35,8,-14,-29,-27,-23,6,59,12,0,61,-15,7,-4,-7,8,41,-13,-9,-4,22,11,12,14,1,-1,-34,28,6,9,40,-14,3,-19,1,-5,-75,-29,41,-13,-7,-17,-6,63,-16,-2,-25,-7,6,-13,6,-27,13,32,4,-1,-7,-11,14,-100,16,-25,-40,26,1,9,-13,21,-20,27,-10,63,44,10,-2,24,127,-19,26,-20,-12,-18,57,4,-1,-8,-24,6,-17,-41, 
  /* [5][0][][] */ -12,12,-14,3,-32,-25,-11,106,47,-10,-2,-29,-31,29,36,23,-15,-14,-7,-30,-53,-5,-2,-40,14,2,22,89,79,22,49,37,-45,31,-15,-3,-44,-48,-22,-1,-30,-13,0,-3,44,-4,2,19,5,30,-15,18,-24,-24,21,-6,-21,-5,-17,39,-58,39,-22,-23,12,18,-35,-12,-10,9,44,8,53,5,29,-5,12,19,1,102,-7,-36,40,58,19,2,46,-35,-27,-47,51,-112,-37,-19,-4,-127, 
  /* [6][0][][] */ -21,-30,-4,-40,5,-11,-19,23,14,8,-39,18,56,-48,6,9,8,-46,11,-7,2,10,-30,-8,76,-22,-2,-19,7,-2,16,-22,-37,-13,-25,-18,25,4,18,29,-17,-46,-54,-18,-12,-13,23,-127,32,19,-14,24,10,9,-9,-56,15,-20,-4,-3,45,13,8,-12,28,72,37,-13,-2,-26,18,-33,18,4,45,-31,-35,38,7,17,-5,17,64,-32,5,49,2,-32,21,-17,-48,0,-16,12,2,10, 
  /* [7][0][][] */ 20,-4,29,-15,8,-11,-6,-21,3,-20,-29,-19,-1,-85,36,27,-17,-13,-18,-13,20,-14,-31,-17,-26,-14,3,-28,-7,21,-8,10,-6,2,-9,-32,3,0,-34,17,8,-33,-33,15,-19,6,-3,70,6,12,-27,-13,-31,13,10,-65,27,-3,-12,6,10,-1,-17,-25,-28,45,6,-43,-4,-18,7,51,-22,-14,-9,0,46,17,-4,-26,2,-36,42,-6,-37,127,-16,-14,-49,-32,-21,24,-20,-2,-10,-7, 
  /* [8][0][][] */ -64,33,-38,2,31,-21,-4,9,14,76,-16,-7,4,42,52,-3,-4,35,-57,14,12,20,-20,-3,-36,-12,24,7,53,-94,-1,-3,26,27,5,20,-12,22,-34,27,0,14,3,-127,-21,-12,45,-16,-49,35,-6,61,-89,65,6,2,14,-13,-21,-13,-9,-44,0,25,-32,21,19,-31,-10,14,4,73,-5,24,30,16,-1,-71,6,-26,-16,-11,27,11,-33,-1,7,-41,5,53,-20,-12,31,-34,-36,-1, 
  /* [9][0][][] */ 16,-63,-25,-51,1,30,-17,26,31,-21,6,7,-38,-18,-11,27,14,24,36,-14,-38,18,-23,-30,33,14,12,-6,-27,-24,-36,-14,-3,25,4,40,13,41,-40,21,8,16,-10,-106,14,-8,27,-125,-50,4,2,13,-29,-3,-7,3,-51,36,-35,3,2,9,29,47,31,127,29,55,27,1,25,-21,-18,-9,-48,18,72,-15,-13,25,5,-10,-10,-68,18,18,11,-5,-54,21,-47,13,-12,-1,16,-18, 
  /* [10][0][][] */ 31,55,-24,18,74,-127,28,-9,5,51,40,-4,-25,22,6,-78,5,29,-29,33,-91,8,-5,-12,-62,-38,-43,66,37,24,-3,41,-17,-14,23,11,81,-1,4,17,-13,89,29,-23,-44,-25,-58,1,-26,7,-25,-23,-17,-23,23,4,20,16,8,-1,4,19,-10,33,12,52,35,7,36,-8,45,46,-47,-19,-46,-22,7,20,-31,-14,47,-20,-74,-36,63,-39,107,-11,-41,16,21,-3,103,28,-16,-127, 
  /* [11][0][][] */ 41,38,-24,28,-1,9,55,3,-1,-17,-12,-19,-4,3,16,3,7,2,-87,-14,-10,6,15,-3,-32,-23,-18,5,11,20,1,-10,11,23,4,13,8,4,-9,21,10,23,47,-107,39,-31,0,0,-127,25,11,-54,28,24,-4,16,-15,-4,-7,-4,6,-26,-21,24,-36,60,-18,1,0,7,36,17,-55,-21,0,26,-9,-35,-60,-5,-11,-6,71,38,5,-19,-1,-22,3,55,-20,-13,-4,5,-11,3, 
  /* [12][0][][] */ -36,16,0,-4,-34,31,-2,-14,127,14,0,-16,-7,5,-28,-37,24,17,1,66,45,35,-1,-12,0,27,24,-30,-81,6,19,-25,2,-2,-21,-15,18,-8,32,-17,-38,-19,-2,21,-1,26,10,-3,16,20,-48,17,-5,-6,13,-7,70,-14,11,12,-2,-10,14,-5,-6,26,-25,5,11,20,-10,-29,23,-1,-66,19,26,-11,1,-53,5,15,27,52,-10,-7,-25,-12,9,9,-3,49,-23,-12,9,15, 
  /* [13][0][][] */ 31,-4,-26,37,43,-4,12,18,-5,1,-11,-1,13,-2,8,1,22,-59,-42,16,-7,-11,8,-1,10,11,-9,-11,-19,-29,-12,18,2,4,7,29,23,12,17,11,-11,14,18,50,25,5,-14,-127,24,-10,0,7,-17,1,8,-2,-18,8,16,18,20,23,-13,0,-6,-17,-26,-76,1,11,-15,-35,-17,30,-13,16,-33,12,19,-2,14,-3,-12,9,18,21,-1,5,-11,-9,16,2,6,11,-25,-13, 
  /* [14][0][][] */ -91,-49,19,36,9,-16,-46,10,-22,-1,-1,17,68,4,-111,5,86,-16,-11,9,-5,-14,31,10,-110,14,12,-24,-32,-90,-22,0,-22,-4,0,-56,38,18,-7,26,25,34,-26,-41,19,127,80,50,-93,49,15,13,-43,-1,15,-2,10,8,72,40,30,34,22,26,-2,-20,-40,58,22,51,-75,-89,-79,6,-4,39,-20,36,76,2,71,-5,15,15,24,17,64,39,19,39,53,-9,-9,16,14,-10, 
  /* [15][0][][] */ 106,-26,50,4,21,104,29,16,-23,47,0,7,-83,-15,-8,48,18,46,66,-40,18,16,-124,50,31,37,49,-34,16,25,-55,-78,-13,-42,69,-22,24,-28,-61,-110,7,12,-12,21,-6,60,-15,-54,116,-71,-43,28,45,-127,50,-118,-5,-81,14,6,-121,-33,-4,10,83,-27,-49,45,-58,66,-55,20,7,46,15,5,11,-40,84,-7,-44,6,41,71,-34,5,-15,-52,13,5,88,-20,-63,68,11,1, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.022011833265423775, 0.015823818743228912, 0.011366528458893299, 0.010644769296050072, 0.01828165166079998, 0.01585422083735466, 0.012888710014522076, 0.01768273301422596, 0.010203475132584572, 0.0088425474241375923, 0.015709884464740753, 0.026964917778968811, 0.019487407058477402, 0.019915884360671043, 0.025243053212761879, 0.012073314748704433, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10138, -9756, 3167, 64584, -2287, -4444, -11637, 661, -2627, 900, 2209, -1160, 708, -8071, 5996, -6574, 440, 16077, 22828, 2324, 2800, -2880, -825, -159, 18785, -1442, -1097, -3050, -5947, -7432, 7619, -9186, -2185, -1293, -49, 18160, 1621, -3304, 20398, 1065, -764, 1681, -9837, -7657, -7375, 68421, -1011, 18237, 26395, -12302, -391, 8512, 8123, -176, -6340, 2681, -12706, 2057, 1350, -7709, -1998, -587, -14716, 190, 388, 17133, 29427, 15571, -12843, -276, -7743, -1088, 39035, 11395, 370, 1165, 17659, 33241, 934, -11170, -1857, -7075, 111, -3184, 677, 1911, 605, 148, 1906, -2529, 590, 665, -59, -1131, 147, 50827, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00018842356803361326, 9.77615563897416e-05, 0.00022863733465783298, 3.3829248422989622e-05, 0.00014075700892135501, 0.0001581067917868495, 0.00028677436057478189, 6.773404311388731e-05, 0.00013978790957480669, 0.00041899186908267438, 0.00015866931062191725, 0.00040121906204149127, 8.2177793956361711e-05, 0.00033207013620994985, 0.00017165389726869762, 0.00011944201105507091, 8.974358206614852e-05, 0.00029126377194188535, 7.1047084929887205e-05, 0.00024285065592266619, 4.6948087401688099e-05, 0.00016543983656447381, 0.00013382383622229099, 0.00031841121381148696, 0.00018554821144789457, 0.00023025802511256188, 0.0001236544776475057, 0.00020583899458870292, 0.00011428012658143416, 0.00010085623216582462, 0.00011268253001617268, 0.0001894680317491293, 0.00012646513641811907, 0.00012542802141979337, 0.00021888808987569064, 0.00012943749607075006, 0.00037560748751275241, 0.00012356143270153552, 4.9515205319039524e-05, 0.00011520938278408721, 0.00019519455963745713, 0.00029103839187882841, 0.00034455006243661046, 0.00018056394765153527, 0.00017840435612015426, 5.7159595598932356e-05, 0.00023919338127598166, 0.00018624700896907598, 9.9234515801072121e-05, 0.00019032334967050701, 0.00017872329044621438, 0.00013705642777495086, 0.00022925750818103552, 0.00028342514997348189, 0.00027050351491197944, 0.0004374585987534374, 0.00030376817448996007, 0.00023541858536191285, 0.00010150684101972729, 8.0755773524288088e-05, 0.00028424666379578412, 0.00013071137072984129, 0.00025013662525452673, 0.00012225307000335306, 0.00018460187129676342, 0.0001668489130679518, 7.8128221502993256e-05, 0.00010881739581236616, 0.00030100104049779475, 0.00021177607413846999, 0.00024764318368397653, 0.00013855095312464982, 0.00015198327309917659, 0.00013666193990502506, 0.00015216998872347176, 0.00023834194871596992, 0.00052193639567121863, 5.0458613259252161e-05, 0.00030755970510654151, 0.0001730922085698694, 0.00017763127107173204, 0.00031599117210134864, 0.00011583949526539072, 0.00015163529315032065, 0.00010588316217763349, 8.5259569459594786e-05, 0.00014337575703393668, 0.00018360243120696396, 0.00017965168808586895, 0.00011339273623889312, 0.00020173823577351868, 0.00010574985935818404, 0.0001457406033296138, 0.00044208511826582253, 0.0077970512211322784, 7.3972638347186148e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,9,-20,105,-16,24,-61,-55,17,-8,103,-8,1,-9,-3,54,4,16,-25,2,72,0,32,-36,1,19,45,44,21,14,23,48,-6,29,11,-14,6,49,-64,-27,20,8,26,22,-87,-57,26,-5,-9,-20,-6,-9,49,5,-6,1,-2,-36,28,-31,29,-1,127,27,-11,-13,10,-48,71,34,7,-7,75,-37,70,2,16,-127,30,68,3,15,127,-10,39,30,-28,-19,37,-4,-13,80,0,19,-2,13, -50,18,-9,9,54,-9,-10,-127,39,14,-127,-3,-15,-13,3,96,15,-29,-14,-16,76,-97,127,24,-60,-30,-106,-17,30,37,-50,18,119,12,-12,-1,-23,127,-61,-127,10,-19,-29,16,47,-127,127,-46,-75,54,48,7,39,-66,33,55,36,41,-99,87,127,32,5,-22,43,-38,-99,-5,37,-31,-19,45,-47,-53,105,-6,-29,-58,-33,65,-61,60,-14,10,-12,48,55,-42,-27,55,-15,71,-127,-32,23,-127, -2,-6,-23,-75,10,17,37,24,-4,-1,4,65,2,-12,-12,6,-16,17,-5,17,8,23,25,-36,1,-30,10,12,-5,11,46,-80,47,15,12,-22,13,4,-33,-22,8,3,-16,12,22,-31,24,0,6,-8,7,-3,4,4,-3,8,-8,46,9,-2,11,-16,1,-14,-25,-17,27,-52,-108,-7,41,-17,-127,-28,-13,14,12,-9,3,10,-15,25,-35,-2,-40,21,27,34,-24,-15,22,-12,19,6,-3,-46, 
  /* [0][1][][] */ -42,57,-17,38,-82,-15,-10,-46,24,98,-42,-21,-30,-26,-8,68,127,-23,-86,-14,61,-127,-29,14,-35,-48,-127,-6,37,38,-51,28,-127,-77,-54,3,67,-4,-54,48,-19,87,0,-2,35,-49,-11,-33,127,40,-4,20,44,8,-33,-17,32,10,-118,127,-36,-91,20,127,-57,-36,-84,127,-37,127,-19,52,-33,-59,36,7,-35,-70,127,45,127,40,7,3,127,30,-94,46,-39,-31,-101,40,99,104,29,-59, 127,127,127,127,-43,-127,127,24,127,-127,18,-127,-106,127,127,127,-19,-127,-61,-127,127,24,-64,127,127,127,-56,-127,127,127,-127,127,-8,-127,-124,127,-127,-46,92,109,-127,-127,127,127,127,-120,-104,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-39,42,-107,-27,-68,-70,127,127,-71,124,127,-105,-127,127,-39,127,-127,-127,-127,120,-75,127,-39,127,77,127,-41,-127,-21,-109,-127,-127,-23,-127,-19,-127,-127,120, -26,60,-40,3,127,72,-21,50,2,25,-14,-5,-25,-30,-14,-7,-107,-20,-127,39,33,77,-10,-120,-33,-41,124,72,10,43,72,7,123,-50,127,-3,54,5,-93,12,35,22,-24,1,-25,-51,-9,-42,80,13,-11,41,-6,-5,-73,-13,23,21,127,-93,1,127,-1,-35,-111,-28,-75,97,14,-16,122,24,-20,-58,12,45,-28,-7,-47,-7,-47,8,43,21,-89,34,127,-47,32,-21,127,-9,-111,37,33,18, 
  /* [0][2][][] */ -5,-37,-22,-63,-5,15,39,29,-1,11,-20,53,25,-36,-8,12,43,3,5,21,-13,27,-15,-26,1,-22,10,0,-11,-8,49,-75,-33,67,-28,-25,33,-35,-61,16,10,10,-37,16,12,-77,-11,-1,-7,1,18,-10,7,1,-21,6,-2,43,-45,36,-7,-16,4,19,-7,-9,21,-51,-56,12,-20,-13,-110,-34,2,19,17,-14,56,16,21,19,-37,16,13,24,-20,6,4,23,23,-6,19,41,-7,-27, -27,-3,-28,23,-46,74,-24,65,8,-6,56,-11,127,-9,-19,-18,-1,-39,-54,25,-23,79,-42,-116,-47,-46,101,68,11,46,55,-3,-118,64,-19,-22,-31,-27,-127,-6,44,-11,-15,38,-28,-51,-16,-47,-60,27,68,24,-12,-81,29,52,16,26,74,-54,20,-57,-10,0,21,-25,-127,-59,-10,-25,-67,22,35,-47,-32,-7,-44,23,-58,0,47,33,18,10,6,61,-90,127,16,126,-30,-19,113,-20,47,85, -9,-35,-26,30,15,62,-43,16,4,-7,0,14,12,-52,-12,-18,-43,-6,11,20,-21,5,-18,3,-1,21,-3,51,-2,-3,33,27,21,40,21,-22,-9,-26,-34,9,10,-11,22,7,-75,-32,-13,5,-1,-15,-2,-6,-8,9,-18,-5,-3,-48,13,-29,-20,50,6,-25,-8,-3,34,-59,49,10,60,-19,27,-56,-17,22,12,14,-7,24,-26,32,84,-17,-16,52,40,-6,110,12,4,-18,6,-20,-6,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.008008001372218132, 0.0041548660956323147, 0.0097170863300561905, 0.0014377429615706205, 0.0059821726754307747, 0.006719538476318121, 0.01218791026622057, 0.0028786966577172279, 0.0059409863315522671, 0.017807153984904289, 0.0067434455268085003, 0.017051810398697853, 0.0034925560466945171, 0.014112980104982853, 0.0072952904738485813, 0.0050762854516506195, 0.0038141021504998207, 0.012378710322082043, 0.0030195009894669056, 0.010321152396500111, 0.0019952936563640833, 0.0070311930030584335, 0.0056875129230320454, 0.013532476499676704, 0.0078857988119125366, 0.0097859660163521767, 0.0052553149871528149, 0.008748156949877739, 0.0048569054342806339, 0.0042863897979259491, 0.0047890073619782925, 0.0080523910000920296, 0.0053747682832181454, 0.0053306911140680313, 0.0093027437105774879, 0.0055010933429002762, 0.015963317826390266, 0.0052513605915009975, 0.0021043962333351374, 0.0048963986337184906, 0.0082957688719034195, 0.012369131669402122, 0.014643377624452114, 0.0076739676296710968, 0.0075821848586201668, 0.002429282758384943, 0.010165718384087086, 0.0079154977574944496, 0.0042174668051302433, 0.0080887423828244209, 0.0075957397930324078, 0.0058248979039490223, 0.0097434436902403831, 0.012045568786561489, 0.011496399529278278, 0.018591990694403648, 0.012910147197544575, 0.010005289688706398, 0.0043140407651662827, 0.0034321201965212822, 0.012080483138561249, 0.0055552334524691105, 0.010630806908011436, 0.0051957555115222931, 0.0078455796465277672, 0.007091078907251358, 0.0033204492647200823, 0.0046247392892837524, 0.012792544439435005, 0.0090004829689860344, 0.010524834506213665, 0.0058884155005216599, 0.0064592892304062843, 0.0058081322349607944, 0.0064672240987420082, 0.010129532776772976, 0.022182296961545944, 0.0021444910671561956, 0.013071287423372269, 0.0073564187623560429, 0.0075493287295103073, 0.013429624028503895, 0.0049231783486902714, 0.0064444998279213905, 0.0045000342652201653, 0.0036235316656529903, 0.0060934694483876228, 0.0078031029552221298, 0.0076351966708898544, 0.0048191910609602928, 0.008573874831199646, 0.0044943690299987793, 0.0061939754523336887, 0.018788617104291916, 0.33137467503547668, 0.0031438372097909451, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 21096, 1068, 10973, -908, 5644, 5789, 15004, 8667, -1093, 22037, 7785, 3633, 6516, 35710, -497, -2241, 9388, 11152, 2467, -259, -851, 12579, 5273, 4137, 10526, 6363, 4547, 4553, 70, -147, 7097, 14511, 13818, 2208, 8672, -708, 18970, 10972, 1112, 5262, 1301, 13600, 17217, 5164, 4126, 12818, 16090, 5710, 6509, 3023, 459, -750, 20108, 8181, 9623, 17456, -244, 7392, 2893, 5256, 13810, 5752, 3344, 8591, 7045, 5661, 8509, -1113, 19139, 9971, 7321, -1954, -2067, 3875, 1990, 3243, 27877, 20834, 17859, -2342, 4888, -6133, -2604, 530, 7505, 6263, 7491, 4734, 15016, 3729, 11112, 4355, 16020, 23497, -11166, 13526, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00012401696585584432, 0.00027227395912632346, 0.00012159254401922226, 0.00057866750285029411, 0.00028178247157484293, 0.00016097025945782661, 0.00020870313164778054, 0.00040268225711770356, 0.00040776771493256092, 8.3693179476540536e-05, 0.00018418554100207984, 0.00023004852118901908, 0.00042502745054662228, 0.00013708668120671064, 0.00021121387544553727, 0.00027867272729054093, 0.00023330730618909001, 0.00020828084961976856, 0.00017100336845032871, 0.00054767914116382599, 0.0003506750799715519, 0.00020216334087308496, 0.00027741189114749432, 0.0001968845899682492, 0.00017082085832953453, 0.00032686209306120872, 0.00030403834534808993, 0.00019397828145883977, 0.00043971982086077332, 0.00028708321042358875, 0.00020501048129517585, 0.0001322451134910807, 0.00014500974793918431, 0.0005003961268812418, 0.00018980918684974313, 0.000454184744739905, 0.00012033031816827133, 0.00024153861158993095, 0.00041247284389100969, 0.00017344084335491061, 0.00036805204581469297, 0.00013581995153799653, 0.00012789115135092288, 0.00014344576629810035, 0.00026758242165669799, 0.00025653399643488228, 0.00017274654237553477, 0.00024573312839493155, 0.00023417580814566463, 0.00030283231171779335, 0.00030632660491392016, 0.00094571552472189069, 0.00013282334839459509, 0.00019159645307809114, 0.0002416751958662644, 0.00010574798943707719, 0.0003058608272112906, 0.00023729198437649757, 0.00026613168301992118, 0.00031313690124079585, 0.00012435458484105766, 0.00024436134845018387, 0.00030579825397580862, 0.000316859339363873, 0.00014437331992667168, 0.00020226385095156729, 0.00022905126388650388, 0.0002806923002935946, 0.00013780930021312088, 0.0001184996435767971, 0.00026897489442490041, 0.00027366727590560913, 0.00020047267025802284, 0.00032384964288212359, 0.00021110437228344381, 0.00038665009196847677, 8.3790175267495215e-05, 0.00021253834711387753, 9.1814305051229894e-05, 0.00050194724462926388, 0.00020756153389811516, 0.00033866165904328227, 0.00013854484132025391, 0.00041523328400216997, 0.00020839415083173662, 0.00025918541359715164, 0.00020346305973362178, 0.00029440270736813545, 0.00011551470379345119, 0.00042208825470879674, 0.00012284950935281813, 0.00040142599027603865, 0.000130893022287637, 0.00011894965427927673, 0.00026244710898026824, 0.00024686832330189645, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 27,-26,83,127,87,-26,41,-44,126,-5,-59,-70,59,60,-41,-66, 
  /* [1][0][][] */ 58,89,-32,-35,49,-42,14,33,35,39,-33,75,19,-44,127,-45, 
  /* [2][0][][] */ 13,-93,32,-26,-40,30,-73,113,-91,-90,25,127,-28,-123,78,-120, 
  /* [3][0][][] */ 111,123,-23,11,-127,-11,-48,-17,-27,-8,102,-61,-35,79,-16,-1, 
  /* [4][0][][] */ -5,-42,8,9,-58,33,-49,53,-72,-75,-20,-3,16,-127,64,3, 
  /* [5][0][][] */ 127,-47,-11,4,16,-105,-18,-6,-16,20,-118,7,30,-22,23,17, 
  /* [6][0][][] */ -127,-61,-3,86,-61,-4,-66,24,-76,-76,-62,-45,9,60,25,71, 
  /* [7][0][][] */ -43,20,-95,54,69,-127,-24,83,29,-21,8,33,1,12,-50,9, 
  /* [8][0][][] */ 28,-29,-23,-19,7,22,-51,-34,-15,14,-52,9,-127,16,-6,14, 
  /* [9][0][][] */ 58,-84,77,127,24,25,-11,-110,69,-117,5,-58,35,88,-62,22, 
  /* [10][0][][] */ -100,-67,-12,-35,86,42,85,70,100,-112,-106,56,127,-99,-97,72, 
  /* [11][0][][] */ 37,-41,-127,35,70,16,-64,43,-16,-49,-44,-28,-8,56,-58,6, 
  /* [12][0][][] */ 78,-45,17,24,-2,-55,-52,-21,21,-15,-127,-21,-78,-17,4,19, 
  /* [13][0][][] */ 39,-6,95,-82,127,-45,-51,-67,31,-27,-41,-33,27,-47,91,-10, 
  /* [14][0][][] */ -58,38,-99,-39,96,-127,48,-63,51,32,-8,-97,17,112,-33,23, 
  /* [15][0][][] */ 25,-8,53,40,54,-48,-38,-17,29,-77,-67,-13,-127,-43,-38,58, 
  /* [16][0][][] */ -127,47,-11,24,-21,114,14,84,-29,48,93,8,4,-5,6,-49, 
  /* [17][0][][] */ -4,-8,-39,-19,-32,5,40,47,-24,127,-15,7,-11,53,57,-2, 
  /* [18][0][][] */ -22,127,-23,-7,18,23,42,-97,16,62,-41,118,-31,-66,64,-105, 
  /* [19][0][][] */ 9,-17,25,27,-11,49,11,12,27,11,-42,-8,-127,-12,-10,36, 
  /* [20][0][][] */ 59,-44,-27,-72,-9,18,26,-75,-41,18,-127,-30,42,29,40,5, 
  /* [21][0][][] */ 58,-18,127,44,-19,53,38,10,-7,33,-12,0,-15,74,-11,-5, 
  /* [22][0][][] */ 44,6,12,11,-20,-16,17,127,21,16,16,24,-7,51,16,29, 
  /* [23][0][][] */ -8,32,-106,21,37,-127,20,49,13,-12,-27,-28,-74,9,-11,37, 
  /* [24][0][][] */ 25,-60,10,-76,52,-8,-38,-21,41,15,57,95,-46,86,127,44, 
  /* [25][0][][] */ -127,-120,-30,7,-2,4,7,-53,-67,0,-81,11,21,39,-34,68, 
  /* [26][0][][] */ 5,14,26,-1,-37,12,-7,74,-57,-37,8,5,22,-127,25,4, 
  /* [27][0][][] */ -73,46,-37,35,53,-20,-14,23,16,-7,127,38,-26,14,-44,-36, 
  /* [28][0][][] */ 2,-10,16,31,-8,3,24,103,25,10,-29,-14,-127,-5,8,51, 
  /* [29][0][][] */ -11,57,30,-37,18,-11,13,-25,-127,40,-16,-7,14,25,-63,27, 
  /* [30][0][][] */ -11,0,-127,-56,49,-67,-14,9,-41,-19,-23,-12,-62,-19,21,-5, 
  /* [31][0][][] */ 100,-40,-127,15,24,-2,-36,44,-24,-6,-89,-55,0,-12,-86,49, 
  /* [32][0][][] */ -127,22,27,34,-4,49,6,38,14,-6,66,15,-4,31,-29,-19, 
  /* [33][0][][] */ 7,-18,127,-18,-85,40,5,-57,-6,16,3,21,8,27,51,41, 
  /* [34][0][][] */ -13,-30,-69,-118,11,21,30,26,-25,-52,-4,-127,37,2,4,28, 
  /* [35][0][][] */ 3,-45,20,42,74,-36,28,-5,-127,24,-16,42,-27,123,-39,-23, 
  /* [36][0][][] */ -103,85,-13,-28,-36,44,23,52,-10,33,127,-29,-14,-6,12,-41, 
  /* [37][0][][] */ -37,14,127,-32,-83,-57,14,-21,13,33,-4,10,15,-53,59,24, 
  /* [38][0][][] */ -9,-35,4,17,40,-62,-73,22,-32,-26,66,-3,127,21,-1,11, 
  /* [39][0][][] */ -8,6,-20,-17,-59,-103,105,127,-85,24,-13,-74,-9,51,62,78, 
  /* [40][0][][] */ 79,10,-38,-9,-25,94,-36,-10,20,-9,21,-9,127,13,-42,-17, 
  /* [41][0][][] */ 3,-1,-13,-127,37,-23,-61,-76,16,-44,29,-42,5,-9,-36,68, 
  /* [42][0][][] */ 12,63,32,127,-98,6,-119,8,-67,-72,101,-62,-64,123,-43,-11, 
  /* [43][0][][] */ 46,124,-42,127,28,12,42,-83,-37,101,-15,7,21,-24,28,32, 
  /* [44][0][][] */ -14,-7,-127,31,44,78,-24,39,-13,-30,34,-33,5,-49,-47,-15, 
  /* [45][0][][] */ -5,24,-20,-127,-7,-12,40,-14,-15,1,-38,4,14,-59,43,-12, 
  /* [46][0][][] */ 26,55,34,-35,34,18,-49,55,13,-35,-18,8,35,127,93,5, 
  /* [47][0][][] */ 20,-36,27,-39,-28,21,-58,70,-9,-29,22,27,1,-127,52,-7, 
  /* [48][0][][] */ 14,-12,-8,-127,-18,-27,9,-6,6,-37,15,-32,-9,44,0,80, 
  /* [49][0][][] */ 40,-21,-14,96,67,-10,-2,32,-62,-11,21,16,-24,50,127,17, 
  /* [50][0][][] */ -26,-49,95,-4,13,67,-40,-64,82,-66,127,62,111,8,-2,-62, 
  /* [51][0][][] */ 31,68,-10,-6,36,-3,-49,25,52,-2,0,127,1,46,38,-53, 
  /* [52][0][][] */ -1,90,106,-9,4,-27,5,-25,-35,-10,-4,15,-39,100,-127,-30, 
  /* [53][0][][] */ -10,-15,-36,-127,-46,23,29,-33,-34,48,35,0,36,-31,41,28, 
  /* [54][0][][] */ 18,-9,-4,-42,42,-8,10,9,47,-45,11,-18,-2,127,33,14, 
  /* [55][0][][] */ -7,-60,-45,5,21,-57,-20,-127,25,-82,-34,-17,-31,-69,-79,-56, 
  /* [56][0][][] */ 44,42,28,62,3,-27,22,127,19,-21,0,-34,80,-17,-49,40, 
  /* [57][0][][] */ 54,-14,127,-31,-37,-32,-26,-43,2,13,-90,22,12,-27,20,-11, 
  /* [58][0][][] */ 75,64,-12,54,-127,-11,-1,39,-23,5,86,-48,-22,-42,5,-51, 
  /* [59][0][][] */ 127,-83,8,-21,-53,2,-19,30,-46,14,-121,6,43,8,12,60, 
  /* [60][0][][] */ -81,26,5,-8,44,5,13,47,43,2,127,-3,-43,12,40,-7, 
  /* [61][0][][] */ -36,49,-29,37,-27,-8,-32,-80,127,-81,58,-36,67,-67,-99,-9, 
  /* [62][0][][] */ -23,-28,-127,51,37,71,9,106,24,-32,59,-32,-95,-43,-70,-4, 
  /* [63][0][][] */ -47,-6,127,-65,-69,-34,-13,-13,10,24,11,1,9,-37,46,49, 
  /* [64][0][][] */ 32,90,-9,37,93,-4,90,-100,-5,127,-15,-2,1,-78,4,21, 
  /* [65][0][][] */ -4,15,13,-9,68,26,-8,-127,-11,-76,-37,-42,-23,-42,57,12, 
  /* [66][0][][] */ -127,7,-25,3,-50,5,29,-45,-87,-54,-106,40,51,21,47,83, 
  /* [67][0][][] */ 4,-33,-15,127,15,-30,-23,55,46,27,-25,-6,-21,-3,-115,-36, 
  /* [68][0][][] */ -11,-28,-44,127,-63,-3,24,-4,-78,28,28,13,-8,-76,6,-25, 
  /* [69][0][][] */ 91,92,27,108,67,-5,58,-127,9,105,29,61,13,-47,42,26, 
  /* [70][0][][] */ -5,-36,-7,-41,127,18,-11,38,71,27,22,22,-20,64,-8,33, 
  /* [71][0][][] */ 20,36,11,87,43,-127,-46,84,45,-105,17,0,10,-51,-53,33, 
  /* [72][0][][] */ -127,-85,1,40,11,36,-43,22,-45,-43,-60,53,36,38,30,113, 
  /* [73][0][][] */ -40,-13,11,64,32,-9,14,6,77,19,14,46,52,127,-89,-54, 
  /* [74][0][][] */ 48,-37,34,-41,-24,-9,41,0,-66,-36,-126,28,-127,-8,23,31, 
  /* [75][0][][] */ -18,-24,-26,127,-25,-6,-4,-16,-63,7,-25,-27,-10,-38,-30,-40, 
  /* [76][0][][] */ -5,-6,4,58,29,30,-21,-127,31,-109,31,22,-47,-53,41,-65, 
  /* [77][0][][] */ 127,-42,64,82,-21,6,-66,5,67,15,-58,76,62,12,-70,21, 
  /* [78][0][][] */ -62,3,91,-23,-23,25,-127,26,42,-71,11,-85,-28,121,42,-55, 
  /* [79][0][][] */ 0,32,29,5,45,57,-38,-42,16,-53,61,-23,127,-14,-29,-36, 
  /* [80][0][][] */ -106,-76,-54,104,19,8,91,-6,-91,-23,-127,-13,63,-45,-35,44, 
  /* [81][0][][] */ 38,-5,-56,48,127,121,-58,-39,-4,-110,-3,-66,-18,-8,-77,18, 
  /* [82][0][][] */ 127,104,8,34,-106,-32,-75,-9,-93,-25,124,-66,-61,107,10,-73, 
  /* [83][0][][] */ 127,34,4,-26,10,-31,5,18,38,2,58,-46,-41,-35,-19,-73, 
  /* [84][0][][] */ 5,-19,-40,-47,52,43,12,-127,-37,-9,25,15,-2,-16,20,5, 
  /* [85][0][][] */ -21,0,-45,-70,-6,-21,86,85,-17,127,2,-44,39,78,94,-30, 
  /* [86][0][][] */ 111,-36,2,-1,-13,-46,-45,-22,46,-8,-127,6,14,29,-8,51, 
  /* [87][0][][] */ -18,46,3,-23,1,61,-6,40,-3,-57,31,-1,2,-127,20,-4, 
  /* [88][0][][] */ -7,-8,-91,-48,81,-11,-50,-127,35,-79,-21,-13,-39,-14,24,-49, 
  /* [89][0][][] */ 15,-73,35,-63,15,-15,-40,83,127,-84,40,14,-20,4,20,21, 
  /* [90][0][][] */ 4,34,-88,49,50,-37,113,-118,101,127,-91,-1,13,6,-4,23, 
  /* [91][0][][] */ 50,-14,-63,-18,20,-127,-14,-6,-15,-15,-70,11,47,-15,22,17, 
  /* [92][0][][] */ -7,-14,127,88,70,53,68,44,-81,1,-113,10,40,102,-5,-23, 
  /* [93][0][][] */ 127,-20,-15,-10,0,-51,-19,34,-24,54,-109,-9,1,27,-6,14, 
  /* [94][0][][] */ 3,-32,44,91,110,-17,-16,61,9,-14,9,65,-7,127,-49,-82, 
  /* [95][0][][] */ -88,52,22,47,0,42,35,9,36,-11,127,-11,-28,32,3,-28, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00047681343858130276, 0.0010468235705047846, 0.00046749218017794192, 0.0022248283494263887, 0.0010833813576027751, 0.00061888940399512649, 0.00080241006799042225, 0.0015482100425288081, 0.0015677623450756073, 0.00032177881803363562, 0.00070814619539305568, 0.00088447763118892908, 0.0016341216396540403, 0.0005270631518214941, 0.00081206322647631168, 0.0010714252712205052, 0.00089700683020055294, 0.0008007864817045629, 0.00065746414475142956, 0.0021056858822703362, 0.0013482557842507958, 0.00077726622112095356, 0.0010665776208043098, 0.00075697078136727214, 0.00065676245139911771, 0.001256700954400003, 0.0011689495295286179, 0.00074579677311703563, 0.0016906100790947676, 0.0011037613730877638, 0.00078821275383234024, 0.00050844857469201088, 0.00055752531625330448, 0.0019238948589190841, 0.0007297676638700068, 0.0017462240066379309, 0.0004626392328646034, 0.0009286540444009006, 0.0015858523547649384, 0.00066683557815849781, 0.0014150658389553428, 0.00052219291683286428, 0.0004917086916975677, 0.00055151223205029964, 0.0010287858312949538, 0.00098630751017481089, 0.0006641661748290062, 0.00094478088431060314, 0.00090034597087651491, 0.0011643125908449292, 0.001177747268229723, 0.0036360337398946285, 0.00051067175809293985, 0.00073663925286382437, 0.00092917919391766191, 0.00040657393401488662, 0.0011759564513340592, 0.00091232685372233391, 0.0010232081403955817, 0.0012039311695843935, 0.00047811149852350354, 0.00093950680457055569, 0.0011757159372791648, 0.0012182429200038314, 0.00055507844081148505, 0.00077765266178175807, 0.00088064343435689807, 0.0010791899403557181, 0.00052984146168455482, 0.00045560076250694692, 0.0010341395391151309, 0.0010521805379539728, 0.00077076605521142483, 0.001245118910446763, 0.00081164221046492457, 0.0014865705743432045, 0.0003221517545171082, 0.00081715546548366547, 0.00035300248418934643, 0.0019298585830256343, 0.00079802091931924224, 0.0013020673068240285, 0.00053266942268237472, 0.0015964655904099345, 0.00080122210783883929, 0.00099650153424590826, 0.00078226334881037474, 0.001131902914494276, 0.00044412442366592586, 0.0016228212043642998, 0.00047232487122528255, 0.0015433800872415304, 0.00050325010670349002, 0.00045733092701993883, 0.0010090419091284275, 0.00094914546934887767, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -48279, 7889, 1954, -7205, -2845, -6698, -6692, -43524, -2852, 19387, 34765, -293, -3971, -22073, 38818, -46472, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00067287823185324669, 0.00075314746936783195, 0.00097395566990599036, 0.00096531241433694959, 0.00076447566971182823, 0.0012106035137549043, 0.0011795175960287452, 0.00058456719852983952, 0.00061067502247169614, 0.00073341320967301726, 0.00090196012752130628, 0.0005581296281889081, 0.0011273657437413931, 0.0011547692120075226, 0.00065975292818620801, 0.00058701017405837774, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -8,-8,-14,18,23,1,7,97,-38,9,23,-4,10,-14,-4,15,19,-11,-6,-1,65,3,17,127,-17,75,4,-9,35,-10,18,-14,-15,46,21,-41,25,43,29,-18,-91,-9,27,35,24,30,-115,-44, 
  /* [1][0][][] */ -27,-22,24,16,-21,2,7,49,-59,-37,-7,-48,-14,-10,-8,6,-22,125,-8,17,14,15,-31,-11,33,-35,13,24,-24,-96,-25,7,-20,-3,31,0,-9,-38,-7,14,-13,-36,127,15,4,-4,16,-18, 
  /* [2][0][][] */ -23,-12,-12,-35,0,-61,3,-18,-3,13,14,25,17,6,-14,9,-4,-21,-22,-4,-9,0,-3,-127,-16,73,-14,-1,8,-19,-4,-1,-6,51,11,-2,25,7,26,-3,-39,5,-15,-12,3,-16,21,5, 
  /* [3][0][][] */ -9,29,3,-27,-2,-2,2,0,-18,-1,2,41,-127,5,1,-1,2,0,-19,-5,-29,5,2,16,-5,-7,7,20,-9,17,2,16,6,1,18,17,-12,21,40,1,12,1,24,-28,13,-5,5,18, 
  /* [4][0][][] */ 38,-37,9,15,21,27,19,-20,-36,7,-12,-18,-2,12,-2,15,20,-8,-85,-4,-4,11,9,82,4,-25,7,54,8,-86,19,8,4,-31,35,-127,13,28,0,22,-13,26,4,-24,-5,-24,1,6, 
  /* [5][0][][] */ 24,1,-23,56,1,-6,9,34,-4,-2,37,19,5,48,5,-3,-24,20,31,-2,22,-4,6,-24,-1,-54,-6,-20,0,-9,1,15,64,-127,0,31,-23,-15,13,4,-90,58,25,1,-8,6,-99,-19, 
  /* [6][0][][] */ 29,-5,3,-3,-14,-9,0,-14,-8,-3,0,-2,-22,14,-2,7,-2,-20,127,3,2,11,18,-35,12,4,27,-15,-17,-5,-7,-2,-3,-11,38,-42,2,-40,67,11,-2,-12,-5,14,-5,4,1,-9, 
  /* [7][0][][] */ -40,-16,-10,42,-18,77,-6,47,-1,26,-15,127,86,-6,-12,-1,-1,-28,-4,-19,-31,-5,-16,75,1,-35,-55,-29,-15,-15,-18,-22,-4,5,-24,1,6,-58,103,6,30,23,-80,-63,23,-12,-4,7, 
  /* [8][0][][] */ -53,-40,5,3,-2,7,-11,35,-5,-64,8,43,40,7,10,9,-24,51,-34,-3,-53,24,-13,-10,3,4,4,46,-9,116,-16,33,-8,1,-10,-127,-106,62,42,22,22,3,110,-29,8,26,13,39, 
  /* [9][0][][] */ -28,-4,-4,31,16,-28,1,1,55,-30,11,51,-46,4,15,-11,-9,29,-35,-22,42,8,-19,-18,3,3,37,-23,16,-1,11,-3,0,14,61,-96,3,-127,-84,1,-28,33,56,6,-1,13,-2,-35, 
  /* [10][0][][] */ -29,-6,-36,-127,48,88,15,-10,-8,47,12,24,57,-36,-35,23,37,-43,55,-36,32,-35,38,57,-48,-95,1,-41,50,35,55,-44,-25,-81,21,0,14,-47,1,-40,-31,-76,-13,3,22,4,7,-44, 
  /* [11][0][][] */ -12,58,-1,71,34,-70,-78,-33,-1,78,-6,-3,3,50,-9,-96,18,59,3,6,-78,-119,28,-7,-2,-47,14,-33,57,-50,16,-73,50,-32,-48,-91,105,25,-4,-127,-8,65,99,-76,6,-65,36,45, 
  /* [12][0][][] */ 127,-5,-21,11,-4,24,1,95,22,-9,-54,-22,-4,13,-8,-7,-15,11,-6,-14,10,-1,-6,17,5,3,5,11,0,10,-3,2,0,-65,-10,12,-15,-19,-28,3,-16,-67,8,-115,-53,-8,87,-5, 
  /* [13][0][][] */ 11,-1,-2,4,4,-11,0,0,-2,10,4,17,-4,5,1,-2,9,5,9,0,12,-10,7,-1,3,1,16,127,12,-7,7,-7,3,0,-40,23,7,-5,7,-15,-10,-1,2,5,1,-1,-10,-10, 
  /* [14][0][][] */ 66,-18,49,-64,54,24,41,-101,-52,-55,-8,121,-61,-17,60,14,51,25,-48,70,17,14,81,-14,21,60,-35,-109,29,-32,62,36,-7,74,-127,-59,-41,47,89,15,-40,9,42,-9,-19,1,12,-40, 
  /* [15][0][][] */ -3,-51,-73,-29,62,26,56,-51,0,11,-5,-28,76,9,-105,65,41,49,83,-82,-107,-10,65,-12,-89,37,23,54,65,65,52,-61,13,66,101,127,-14,-99,-11,-34,90,57,111,-45,-1,-46,-23,67, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028597325086593628, 0.032008767127990723, 0.041393116116523743, 0.041025776416063309, 0.032490216195583344, 0.051450647413730621, 0.050129495561122894, 0.024844104424118996, 0.025953687727451324, 0.031170060858130455, 0.038333304226398468, 0.023720508441329002, 0.047913044691085815, 0.049077689647674561, 0.028039498254656792, 0.024947931990027428, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 1236, 34627, -630, 46536, 4802, 128717, -3849, 44003, 2151, 26985, 29092, 3163, 4260, 32942, -1432, -1181, -577, 1867, 3642, -2659, -51, -4416, 341, -17360, -4563, 42584, 126631, 100266, 3102, 636, -2246, 1920, 26698, -1378, 33174, 3886, 46033, -651, 49504, 4407, -1466, 62827, -1940, 3204, 50106, -391, 2778, 51980, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.4413266449701041e-05, 3.4438642614986748e-05, 0.000160670155310072, 4.9092483095591888e-05, 0.00012530873937066644, 6.419226701837033e-05, 0.00012971695105079561, 0.00013610979658551514, 8.2882448623422533e-05, 5.1833405450452119e-05, 5.7032739277929068e-05, 8.6184467363636941e-05, 3.9891318010631949e-05, 3.9331607695203274e-05, 0.00016192678594961762, 0.00016645719006191939, 0.00019849694217555225, 6.2946026446297765e-05, 0.00010742519225459546, 0.00015520042506977916, 0.00011346174142090604, 0.00021297908097039908, 0.00011230231029912829, 0.00011465713760117069, 0.00011008649744326249, 0.00010621131514199078, 2.7794232664746232e-05, 7.1814451075624675e-05, 0.00010790787928272039, 0.00013311275688465685, 0.00010198821837548167, 0.00014623475726693869, 5.0727609050227329e-05, 0.00017047217988874763, 2.8610413210117258e-05, 5.1681770855793729e-05, 0.00012528171646408737, 0.00011076479131588712, 0.00011584157618926838, 0.00010229471808997914, 0.00012578048335853964, 9.2798538389615715e-05, 0.0001198577883769758, 8.4877123299520463e-05, 3.5956516512669623e-05, 0.00014797659241594374, 9.7004456620197743e-05, 2.7066793336416595e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 70,-95,102,71,56,-35,109,-66,62,-85,-79,48,53,-42,-69,-91,102,84,50,79,69,-71,-84,52,-34,-40,-61,-64,-65,61,-63,-112,-13,42,71,64,-65,50,-51,-26,49,-71,58,61,-89,10,75,-37, 84,-95,127,85,-81,-67,-59,-85,102,-100,-64,73,79,-109,-95,90,-36,100,82,127,86,-112,50,71,-53,-76,-67,-80,55,80,-30,-127,-86,79,82,85,-85,82,-82,-21,76,-95,82,89,-69,-127,95,-106, 35,-54,73,37,18,-41,-48,-39,41,-30,6,34,30,-77,-52,-5,-52,41,34,71,37,-54,31,26,-29,-47,-46,-24,31,33,88,-89,-81,43,37,35,-32,39,-35,-10,40,-41,31,42,-6,-9,40,-75, 
  /* [0][1][][] */ 93,-109,-41,95,54,-82,127,-90,91,-110,-70,82,83,-109,-13,-127,127,108,75,-40,88,109,-127,73,74,-77,-91,-98,-127,88,-68,-9,-88,70,105,95,-84,78,-80,90,83,-100,84,90,-90,105,94,-93, 127,-127,-69,127,-127,-127,-94,-127,127,-127,-127,127,127,-127,-23,96,-62,127,127,-53,127,127,69,127,127,-127,-127,-127,54,127,-29,14,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 65,-83,-35,69,37,-63,-52,-62,59,-40,-61,56,48,-51,-17,12,-63,52,58,-32,57,63,49,63,64,-67,-62,-44,37,56,127,12,-63,70,48,50,-51,62,-59,57,60,-57,52,62,-65,-67,58,-56, 
  /* [0][2][][] */ 44,-52,-50,51,26,-54,63,-43,41,-70,-2,39,54,-73,83,-79,72,51,34,-32,29,-8,-77,30,-24,-46,-49,-50,-73,31,-39,87,-73,38,47,43,-29,37,-42,-90,45,-49,38,43,-26,17,42,-78, 73,-75,-52,80,-57,-64,-74,-68,53,-79,-67,61,74,-48,127,33,-48,57,61,-44,53,-18,43,66,-48,-69,-76,-61,32,60,-25,114,-53,65,59,57,-47,60,-67,-110,68,-67,58,62,-88,51,63,-52, 40,-41,-26,47,29,-20,-18,-36,16,-31,-49,26,31,3,67,23,-35,23,28,-31,26,-2,41,43,-24,-31,-50,-24,34,34,62,63,-1,35,15,22,-20,30,-28,-58,28,-32,25,32,-63,11,32,-2, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0035875637549906969, 0.0014636422274634242, 0.0068284813314676285, 0.0020864305552095175, 0.005325621459633112, 0.0027281711809337139, 0.0055129700340330601, 0.0057846661657094955, 0.0035225038882344961, 0.0022029196843504906, 0.002423891332000494, 0.0036628397647291422, 0.001695381011813879, 0.0016715932870283723, 0.0068818884901702404, 0.0070744305849075317, 0.0084361201152205467, 0.002675205934792757, 0.0045655705034732819, 0.0065960176289081573, 0.004822123795747757, 0.0090516107156872749, 0.0047728479839861393, 0.0048729283735156059, 0.0046786759048700333, 0.004513980820775032, 0.0011812548618763685, 0.0030521140433847904, 0.004586084745824337, 0.0056572919711470604, 0.0043344991281628609, 0.0062149772420525551, 0.0021559232845902443, 0.0072450675070285797, 0.0012159425532445312, 0.0021964751649647951, 0.0053244726732373238, 0.0047075035981833935, 0.0049232668243348598, 0.0043475255370140076, 0.0053456705063581467, 0.0039439378306269646, 0.0050939559005200863, 0.00360727752558887, 0.0015281519154086709, 0.0062890048138797283, 0.0041226893663406372, 0.0011503386776894331, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 523, 864, 2040, 563, 8937, 15311, 2471, -107, -692, -584, 916, 1138, 3083, 1008, 23735, 2927, 1676, -1734, -480, 3400, -1824, 10394, 9915, 8525, 5160, 243, 3603, 4134, 9137, -425, 11987, 6029, 535, -150, 5447, 3340, -1636, 342, -1021, 4359, 948, -560, -865, 153, 896, 2388, 462, 982, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00042336297337897122, 0.00075553066562861204, 0.0002865228452719748, 0.00027651057462207973, 0.00024292767920996994, 0.00026563782012090087, 0.00046484384802170098, 0.00023039021471049637, 0.00038539385423064232, 0.00069341086782515049, 0.0010892108548432589, 0.00028222854598425329, 0.00040677690412849188, 0.00079704908421263099, 0.00015117829025257379, 0.00043037370778620243, 0.00030019818223081529, 0.00027616220177151263, 0.00020932436746079475, 0.00028824523906223476, 0.00034890612005256116, 0.00024338056391570717, 0.00037263153353706002, 0.00018233226728625596, 0.0003101639449596405, 0.00032238670974038541, 0.0019459055038169026, 0.00045787176350131631, 0.00018991829711012542, 0.00043973230640403926, 0.00021990436653140932, 0.00020701000175904483, 0.00083080166950821877, 0.00028969338745810091, 0.00068491697311401367, 0.00054117222316563129, 0.00084194645751267672, 0.00033458901452831924, 0.00021202630887273699, 0.00042929820483550429, 0.00017938263772521168, 0.00027194834547117352, 0.00030685117235407233, 0.00025237619411200285, 0.0022221989929676056, 0.00056449638213962317, 0.00040426343912258744, 0.0011771819554269314, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,6,-5,83,-35,48,30,-30, 
  /* [1][0][][] */ 20,60,37,27,16,-54,108,127, 
  /* [2][0][][] */ -30,-7,-1,-1,-127,-9,10,12, 
  /* [3][0][][] */ 108,2,-22,-120,-127,30,40,-14, 
  /* [4][0][][] */ -127,14,1,-20,83,-2,33,16, 
  /* [5][0][][] */ -115,-42,12,-16,-127,14,14,107, 
  /* [6][0][][] */ -6,-127,24,-20,7,14,-3,26, 
  /* [7][0][][] */ -64,-5,10,91,127,-40,-36,14, 
  /* [8][0][][] */ 76,9,4,-127,13,-29,-52,-39, 
  /* [9][0][][] */ -7,-127,12,-13,3,115,-78,89, 
  /* [10][0][][] */ -106,-14,7,22,-127,87,49,-23, 
  /* [11][0][][] */ 112,25,50,10,-69,-44,-23,-127, 
  /* [12][0][][] */ -3,13,35,3,7,-76,127,60, 
  /* [13][0][][] */ 50,-24,-28,-1,116,127,108,-36, 
  /* [14][0][][] */ 127,32,-18,20,-103,5,-43,0, 
  /* [15][0][][] */ 1,-127,-14,-8,-15,6,11,45, 
  /* [16][0][][] */ -39,-22,6,-7,-127,-4,16,5, 
  /* [17][0][][] */ -32,115,-119,15,12,-127,116,-96, 
  /* [18][0][][] */ 127,-32,-51,30,-58,34,10,124, 
  /* [19][0][][] */ 127,-45,-6,4,32,5,24,2, 
  /* [20][0][][] */ 114,16,-12,127,-4,46,-10,-62, 
  /* [21][0][][] */ 9,23,-61,-11,-5,99,-127,-85, 
  /* [22][0][][] */ -127,13,16,1,-31,11,-65,-33, 
  /* [23][0][][] */ -39,-49,-2,25,-127,61,72,-21, 
  /* [24][0][][] */ 127,-12,-21,1,-70,-2,12,26, 
  /* [25][0][][] */ 12,-9,6,-28,127,48,49,-26, 
  /* [26][0][][] */ 6,-85,10,-42,7,-127,81,-57, 
  /* [27][0][][] */ -15,-127,32,-16,-1,-59,33,-4, 
  /* [28][0][][] */ -98,45,-76,23,1,-27,127,90, 
  /* [29][0][][] */ -12,37,16,12,3,34,-112,-127, 
  /* [30][0][][] */ 127,-21,5,10,-94,9,-85,-67, 
  /* [31][0][][] */ -9,-57,57,13,16,-81,127,84, 
  /* [32][0][][] */ -61,13,-1,13,-127,-88,-97,46, 
  /* [33][0][][] */ -34,9,-1,20,-127,-54,-49,23, 
  /* [34][0][][] */ 7,-127,51,-14,-9,90,-81,51, 
  /* [35][0][][] */ -26,-48,-127,-10,0,-77,48,-55, 
  /* [36][0][][] */ 1,127,57,12,-15,19,-25,-36, 
  /* [37][0][][] */ -127,38,25,-10,57,-28,-15,-106, 
  /* [38][0][][] */ -127,-3,-54,-7,49,8,44,109, 
  /* [39][0][][] */ 8,-29,74,7,29,-62,127,75, 
  /* [40][0][][] */ -30,-22,-18,-50,-127,107,110,-22, 
  /* [41][0][][] */ -127,50,14,-60,-79,-89,-81,44, 
  /* [42][0][][] */ -39,-127,-115,-5,-14,79,-121,-104, 
  /* [43][0][][] */ -86,15,-2,-127,108,51,64,2, 
  /* [44][0][][] */ 127,-10,10,-85,35,-27,-8,39, 
  /* [45][0][][] */ -27,-127,-10,-15,-12,-56,57,-9, 
  /* [46][0][][] */ 113,-6,-2,-39,127,-31,-30,6, 
  /* [47][0][][] */ 127,1,-4,115,-7,21,20,-39, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00075778126483783126, 0.0013523312518373132, 0.0005128498887643218, 0.00049492879770696163, 0.00043481847387738526, 0.00047546756104566157, 0.00083202827954664826, 0.00041237755795009434, 0.00068981997901573777, 0.0012411425122991204, 0.0019495885353535414, 0.00050516345072537661, 0.0007280937279574573, 0.0014266454381868243, 0.00027059539570473135, 0.0007703298470005393, 0.00053732749074697495, 0.00049430527724325657, 0.00037467159563675523, 0.00051593279931694269, 0.00062451028497889638, 0.00043562910286709666, 0.00066697661532089114, 0.00032635818934068084, 0.00055516528664156795, 0.00057704292703419924, 0.00348299415782094, 0.00081954884808510542, 0.00033993649412877858, 0.00078708090586587787, 0.00039360884693451226, 0.00037052910192869604, 0.0014870595186948776, 0.00051852484466508031, 0.00122593913692981, 0.00096864911029115319, 0.0015070076333358884, 0.00059888395480811596, 0.00037950783735141158, 0.00076840480323880911, 0.00032107863808050752, 0.00048676284495741129, 0.00054923573043197393, 0.00045173047692514956, 0.0039775343611836433, 0.0010103972163051367, 0.00072359485784545541, 0.0021070488728582859, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -37684, 31919, -14317, -15141, 27015, -96, 33067, 42432, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00046429640497080982, 0.00056314177345484495, 0.0013706580502912402, 0.0015225519891828299, 0.00070126238279044628, 0.00060141243739053607, 0.00061535043641924858, 0.0010181354591622949, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -51,-10,-36,4,-2,-11,17,12,-114,127,-22,99,106,-2,61,-29,-16,-35,6,5,-14,3,-15,-34,15,-87,4,49,-14,23,4,-23,-12,-65,97,14,-16,-2,6,-10,107,-4,33,-23,-22,20,-30,-24, 
  /* [1][0][][] */ 4,32,127,10,-12,-23,2,-85,33,-2,29,11,-33,17,-10,-126,15,-68,11,4,-41,33,27,-42,-20,-1,19,-1,17,-19,7,0,-14,16,20,4,-17,-41,74,-64,7,55,-24,30,-13,3,23,11, 
  /* [2][0][][] */ 7,-59,15,-49,27,25,-10,-27,7,4,-5,18,-9,63,10,3,-47,127,-23,-35,-13,29,-46,-12,126,-4,4,-6,-28,-8,0,-39,-13,-10,2,5,-14,-5,-7,12,12,-27,-15,-4,9,27,-31,-39, 
  /* [3][0][][] */ -5,-94,-5,7,5,0,-9,9,2,-10,21,27,8,-16,58,9,-13,-21,-1,29,-15,17,-21,4,3,58,-3,-2,0,6,127,1,14,9,1,-4,-25,-16,-10,13,-17,10,-14,26,-10,3,-12,42, 
  /* [4][0][][] */ -106,7,12,-10,-5,-51,-3,-7,33,-58,20,-20,-32,10,-29,-24,-5,11,2,30,21,-17,12,2,-5,44,11,126,1,2,4,-22,-3,-127,-39,14,-5,-5,13,2,-55,-6,-13,22,-59,-4,10,-9, 
  /* [5][0][][] */ -31,27,13,8,-58,16,-3,44,12,9,8,12,-8,-40,9,25,0,-91,27,7,36,-46,17,41,10,7,-86,-48,-50,-34,14,-2,-2,-71,1,-72,63,3,-44,21,19,-35,-5,3,127,-22,-54,3, 
  /* [6][0][][] */ -38,-23,-8,-3,50,-42,8,-28,-5,-12,48,-23,-4,52,-8,-63,3,10,-5,-35,-35,48,0,-84,6,-2,-67,-68,36,46,-10,-1,5,-73,-9,83,-64,-43,15,-75,-8,15,21,54,127,-34,35,16, 
  /* [7][0][][] */ 14,30,-78,39,-16,12,-3,60,-16,-1,72,-32,5,-42,-5,-3,-18,-127,35,-40,64,39,25,-54,19,-18,24,-1,-16,36,-15,4,-6,30,6,-25,-6,-49,-39,-63,-13,-28,32,63,-25,-27,6,9, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019732596352696419, 0.023933526128530502, 0.058252964168787003, 0.06470845639705658, 0.029803650453686714, 0.025560026988387108, 0.026152392849326134, 0.043270755559206009, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52007, 557, 10835, -373, 6123, -3686, 1647, 30892, 1258, 32059, -2459, 22503, -6635, -849, 24393, 13465, 791, 19958, 41845, 10846, -583, -502, -462, 11255, -8377, 29179, 46765, 34878, 2972, 256, -1857, 987, 804, 17740, -6857, 13434, -11548, 20583, -22424, 114900, 25165, 26991, 11530, -1668, 17755, 3377, 1571, -787, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00032433314481750131, 0.00031052227132022381, 0.00016048061661422253, 0.00023819309717509896, 0.0001473618031013757, 9.3013266450725496e-05, 0.00064143061172217131, 0.00011166600597789511, 0.00013605561980511993, 0.00015168784011621028, 8.3780141721945256e-05, 0.00019336279365234077, 0.00027155096177011728, 0.00027521947049535811, 0.00010388153896201402, 0.00011923746205866337, 0.00017938850214704871, 0.00019383143808227032, 5.8136152802035213e-05, 0.00015783142589498311, 0.0002529296325519681, 0.00017083404236473143, 0.00017007622227538377, 0.00018291083688382059, 0.00015217364125419408, 0.00012225007230881602, 0.00053089804714545608, 9.2256748757790774e-05, 0.00020294870773795992, 0.0026260698214173317, 9.8985881777480245e-05, 0.00016281931311823428, 0.0010735592804849148, 0.00016112466983031482, 0.00017784725059755147, 0.00018174439901486039, 0.00036482489667832851, 0.00012865000462625176, 0.00026569035253487527, 2.0964311261195689e-05, 0.0001283165329368785, 6.3208753999788314e-05, 0.00013559444050770253, 0.00016272765060421079, 0.00013376180140767246, 9.2574853624682873e-05, 0.00021918865968473256, 0.00012227021215949208, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-4,20,111,4,81,-1,28,15,8,11,7,-6,-9,-42,8,-2,9,-21,-114,-5,-22,127,-10,-2,6,-5,7,-5,6,15,99,18,29,39,-27,2,33,-2,3,17,-71,-8,-9,18,2,-7,-9, 127,9,15,-127,28,87,11,10,122,127,7,43,-50,-23,7,8,127,-55,-60,-57,-99,25,-106,15,18,70,-32,-85,24,22,9,-126,5,-61,127,10,-39,-47,-5,115,-80,-101,-28,2,-34,-8,-127,23, -32,-4,7,15,-1,63,4,17,27,9,-15,32,-14,-4,16,3,-103,29,-4,79,-32,-11,-18,-6,-4,-59,-3,30,-16,4,5,-23,9,-23,19,-18,0,46,41,-11,50,36,-14,12,-43,4,-2,-6, 
  /* [0][1][][] */ 126,8,0,-97,13,-28,36,-16,9,9,-11,53,-5,-1,20,-32,-1,-49,-61,-86,12,-72,-122,-18,5,98,-14,-127,-7,34,11,-108,16,-52,-3,127,-3,57,-40,40,-62,-127,39,-89,-44,-14,-12,-3, 27,-127,-127,116,-127,-127,-127,-127,-127,-96,127,-127,127,127,36,-127,-82,127,127,-107,127,127,111,127,127,-127,-127,29,-127,-127,94,127,-127,127,-30,-41,127,-127,127,127,127,-78,127,127,127,-120,102,108, 54,3,49,-13,5,-61,44,18,-24,15,-104,-8,2,-41,127,3,62,-66,-71,88,13,-45,11,-33,1,7,-39,69,21,42,1,3,32,-44,10,66,-5,63,68,-9,-81,9,-84,-31,28,-16,-12,5, 
  /* [0][2][][] */ -54,-5,25,-16,7,33,-37,22,6,-24,13,32,8,-7,-37,18,5,22,-15,109,8,-31,-15,-13,-3,21,0,53,-8,4,46,-32,-18,-43,-34,-39,-1,31,8,-22,10,-3,41,-39,-36,18,-9,19, 67,124,74,20,16,-22,126,35,17,-3,43,26,-6,-2,-89,24,-58,-57,-36,125,-36,49,13,19,32,-63,-41,31,79,2,127,22,86,-26,7,-36,-25,-17,-14,119,-27,-10,-39,45,20,-32,6,-127, -43,-6,6,-4,4,-7,-62,8,-18,-10,-40,-40,19,-10,-10,10,31,23,-8,-127,23,-9,5,-9,-7,10,-12,-55,-14,10,6,9,-20,87,-38,-23,-4,36,23,-60,5,11,-37,7,-42,127,-6,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013784158043563366, 0.013197195716202259, 0.0068204258568584919, 0.010123206302523613, 0.0062628765590488911, 0.0039530638605356216, 0.027260800823569298, 0.0047458051703870296, 0.0057823639363050461, 0.0064467331394553185, 0.0035606559831649065, 0.008217918686568737, 0.011540915817022324, 0.011696826666593552, 0.0044149653986096382, 0.0050675920210778713, 0.0076240110211074352, 0.0082378359511494637, 0.0024707864504307508, 0.0067078354768455029, 0.010749508626759052, 0.0072604469023644924, 0.0072282394394278526, 0.0077737104147672653, 0.006467379629611969, 0.0051956279203295708, 0.022563166916370392, 0.0039209118112921715, 0.0086253201588988304, 0.11160796880722046, 0.0042069000191986561, 0.0069198207929730415, 0.045626267790794373, 0.0068477983586490154, 0.0075585078448057175, 0.007724137045443058, 0.015505057759582996, 0.0054676253348588943, 0.011291839182376862, 0.00089098321041092277, 0.005453452467918396, 0.0026863720268011093, 0.005762763787060976, 0.006915925070643425, 0.0056848763488233089, 0.0039344313554465771, 0.0093155177310109138, 0.0051964838057756424, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 53523, 6455, 5821, 7749, 1527, 8098, -1640, -228, 1039, 2268, 2646, 285, 1802, -819, 588, -1817, 3998, 9831, -243, 17927, 4801, 2293, 7465, -467, 3242, 5730, 23220, 9252, -83, -2672, 158, 1870, -2200, 8390, 3140, 6766, 7168, 4190, 18840, 2194, -776, 2671, 1088, 4574, 3976, 1942, -1174, 2394, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.0989710113499314e-05, 0.00034997082548215985, 0.00026700078160502017, 0.00042282851063646376, 0.0014925022842362523, 0.00062128034187480807, 0.0011698029702529311, 0.0012082143221050501, 0.00058458867715671659, 0.0006105586071498692, 0.00086231308523565531, 0.00046916905557736754, 0.00053403386846184731, 0.00057785882381722331, 0.00069790985435247421, 0.0020066844299435616, 0.00041053543100133538, 0.0004369758244138211, 0.0021009987685829401, 0.00014894413470756263, 0.00026916828937828541, 0.00042908784234896302, 0.0005348451086319983, 0.0010052422294393182, 0.00037532538408413529, 0.0002024564309976995, 0.00017571155331097543, 0.00039832934271544218, 0.00097019894747063518, 0.00098765816073864698, 0.00058997567975893617, 0.00045665912330150604, 0.00090273295063525438, 0.00026334493304602802, 0.00032715368433855474, 0.00027608603704720736, 0.00051305408123880625, 0.000323401705827564, 0.00012504098413046449, 0.0020930110476911068, 0.00076442229328677058, 0.0010704479645937681, 0.00046233864850364625, 0.00033623876515775919, 0.00030487051117233932, 0.00054982327856123447, 0.00094053760403767228, 0.0011020328383892775, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 60,30,3,16,127,28,-61,-35, 
  /* [1][0][][] */ -20,2,3,127,17,-18,10,15, 
  /* [2][0][][] */ 30,-127,-30,47,-7,-68,93,-1, 
  /* [3][0][][] */ 127,-39,-18,6,-11,-45,56,14, 
  /* [4][0][][] */ 8,-55,127,-23,-6,-54,22,-110, 
  /* [5][0][][] */ 63,12,13,-15,127,12,6,13, 
  /* [6][0][][] */ -22,99,-7,127,38,48,-85,-41, 
  /* [7][0][][] */ -6,127,-7,-9,-12,-14,14,-4, 
  /* [8][0][][] */ 127,61,-3,-4,-63,-15,-13,-50, 
  /* [9][0][][] */ -127,4,2,31,73,2,2,9, 
  /* [10][0][][] */ -65,-17,14,127,24,29,-11,12, 
  /* [11][0][][] */ -127,13,22,-55,42,6,-17,-56, 
  /* [12][0][][] */ 127,20,11,18,-67,-7,-16,-37, 
  /* [13][0][][] */ -23,75,-127,-26,-28,101,-80,75, 
  /* [14][0][][] */ -54,-35,-14,127,10,12,-14,-31, 
  /* [15][0][][] */ -8,127,1,-1,1,-21,17,-46, 
  /* [16][0][][] */ 18,-127,-21,-6,-34,-94,109,-30, 
  /* [17][0][][] */ 26,127,0,-5,1,75,-72,-18, 
  /* [18][0][][] */ -1,40,-127,15,-3,51,-30,64, 
  /* [19][0][][] */ -60,12,10,18,-127,20,33,23, 
  /* [20][0][][] */ -127,4,16,-2,61,-42,46,-6, 
  /* [21][0][][] */ -79,2,-4,-2,-127,-4,18,7, 
  /* [22][0][][] */ -127,-16,-6,-20,48,-23,24,56, 
  /* [23][0][][] */ -18,-16,-5,-7,-7,75,-127,-94, 
  /* [24][0][][] */ -4,32,-127,6,6,46,-18,74, 
  /* [25][0][][] */ 107,-40,-8,127,-93,4,5,-63, 
  /* [26][0][][] */ 5,-19,-6,8,-11,117,127,-28, 
  /* [27][0][][] */ 88,-14,0,36,127,28,65,-18, 
  /* [28][0][][] */ 0,127,-47,-5,15,71,-19,105, 
  /* [29][0][][] */ -9,9,-23,-9,2,95,-127,-98, 
  /* [30][0][][] */ 6,-1,3,-127,-11,3,-5,-15, 
  /* [31][0][][] */ -78,5,1,2,-127,5,13,-4, 
  /* [32][0][][] */ -17,32,28,-127,-7,40,-107,-110, 
  /* [33][0][][] */ -70,-22,-14,9,-127,44,60,0, 
  /* [34][0][][] */ -127,96,10,42,75,-37,27,22, 
  /* [35][0][][] */ -20,127,-10,-1,-2,-95,66,-25, 
  /* [36][0][][] */ 1,41,13,-29,-3,112,-127,-33, 
  /* [37][0][][] */ 25,-73,-1,33,21,-127,117,-18, 
  /* [38][0][][] */ -2,-127,-9,-4,18,25,-27,54, 
  /* [39][0][][] */ 8,-127,-10,-14,-2,-9,-64,-103, 
  /* [40][0][][] */ 107,41,-4,-25,-44,61,-127,-87, 
  /* [41][0][][] */ -4,-113,25,-7,1,106,-81,127, 
  /* [42][0][][] */ 69,1,15,-127,-85,4,21,-32, 
  /* [43][0][][] */ -106,-17,20,-127,63,24,-26,-22, 
  /* [44][0][][] */ 3,-20,-14,10,-19,98,127,-24, 
  /* [45][0][][] */ -127,-31,-6,-7,16,-3,18,-8, 
  /* [46][0][][] */ 18,75,127,0,15,8,19,26, 
  /* [47][0][][] */ 7,-6,-5,127,3,-6,3,4, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00017894092889036983, 0.00077323534060269594, 0.00058991898549720645, 0.00093420915072783828, 0.0032975762151181698, 0.0013726741308346391, 0.0025845954660326242, 0.0026694624684751034, 0.0012916065752506256, 0.0013489852426573634, 0.0019052185816690326, 0.0010365952039137483, 0.0011799093335866928, 0.0012767374282702804, 0.0015419814735651016, 0.0044336249120533466, 0.00090704846661537886, 0.00096546660643070936, 0.0046420055441558361, 0.00032908131834119558, 0.00059470796259120107, 0.00094803865067660809, 0.0011817017802968621, 0.0022210103925317526, 0.00082925439346581697, 0.00044731289381161332, 0.00038822201895527542, 0.0008800799841992557, 0.0021435846574604511, 0.0021821595728397369, 0.0013035087613388896, 0.0010089554125443101, 0.0019945234525948763, 0.00058184168301522732, 0.00072282250039279461, 0.00060999218840152025, 0.0011335560120642185, 0.00071453273994848132, 0.0002762690419331193, 0.0046243569813668728, 0.0016889360267668962, 0.0023650776129215956, 0.0010215039364993572, 0.00074289529584348202, 0.00067358941305428743, 0.0012147949310019612, 0.0020780500490218401, 0.0024348620790988207, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -7014, -23633, 24434, 22634, 4369, -705, 34676, 14567, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0014576220419257879, 0.00086723332060500979, 0.0010743000311776996, 0.0011948196915909648, 0.0011379215866327286, 0.0012035365216434002, 0.00084580306429415941, 0.0008349307463504374, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -8,2,7,-93,8,25,8,6,2,7,0,-2,98,0,0,5,0,-6,-10,4,73,-6,-1,3,32,36,12,7,2,7,4,-127,14,8,-4,3,-31,-4,-13,30,11,-22,-4,1,4,2,8,3, 
  /* [1][0][][] */ -39,-5,-4,-4,45,20,-28,76,21,5,-27,-20,14,0,20,36,0,37,20,-52,-1,19,127,14,-25,-4,50,1,20,1,18,-9,17,-7,-8,-28,2,-52,4,1,-6,-3,-78,-13,-35,6,-48,-95, 
  /* [2][0][][] */ -57,16,5,14,42,-14,32,30,-13,60,6,-8,0,0,4,48,0,16,-127,22,3,15,6,-14,-36,1,34,10,10,29,22,6,9,-5,-15,-11,8,4,-2,5,37,-14,-29,-2,26,-52,24,14, 
  /* [3][0][][] */ 4,-7,4,11,-5,34,4,-13,76,14,4,2,29,0,-28,-9,0,-6,-4,3,-3,0,2,-20,-16,-9,-11,-6,-1,-3,1,-8,-56,50,-52,3,12,-1,1,-127,-2,1,7,-57,2,-1,4,13, 
  /* [4][0][][] */ -2,-7,78,34,9,-18,-4,-3,4,-3,-5,-6,-79,0,-8,5,0,13,8,0,65,4,2,-4,-16,33,-5,43,-7,5,-1,101,1,-5,2,1,20,-13,-9,-19,-5,-127,1,9,-6,-8,2,0, 
  /* [5][0][][] */ -4,44,3,-7,-1,44,25,12,-18,33,7,52,24,0,-127,-2,0,13,-39,20,-14,11,-12,41,-20,-2,32,-3,-15,19,22,-20,49,32,-43,-5,6,18,-46,19,25,-14,-9,26,17,61,22,25, 
  /* [6][0][][] */ -17,-58,1,10,39,-43,-24,8,32,-23,-12,89,-6,0,-127,45,0,-15,50,-18,-10,0,27,-33,30,1,2,-14,51,-10,-9,-9,87,-31,32,2,1,-8,-67,-23,-18,-16,-8,-27,-19,-79,-18,-28, 
  /* [7][0][][] */ -120,-25,-10,10,127,28,66,30,13,4,25,-34,-28,0,80,99,0,18,3,62,-8,-2,-34,43,15,6,38,13,41,68,54,-5,-11,-15,-17,-19,6,16,24,33,73,2,-30,-7,58,-2,66,77, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.061948936432600021, 0.036857414990663528, 0.045657750219106674, 0.050779834389686584, 0.04836166650056839, 0.051150299608707428, 0.03594662994146347, 0.03548455610871315, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 65365, 60654, 60903, 42660, -169, 13737, 1565, 40826, 22241, 30880, 28526, 2411, -47872, -127, 33962, 792, -204, 44519, 1705, 1462, -15478, -7736, 45783, 35409, -23350, 29887, 60207, 22908, -2784, 16397, -8220, -50079, 12322, 104590, 30984, 1848, 75144, 53, 172203, -22188, 15100, -28162, 3007, 118265, -3202, 63009, 1755, -21835, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.2675109044648707e-05, 6.5640786488074809e-05, 0.00017905101412907243, 0.00013002783816773444, 0.00014187781198415905, 0.00016073885490186512, 0.00015724223339930177, 3.9916463720146567e-05, 0.00010034244041889906, 2.8705320801236667e-05, 5.1829796575475484e-05, 2.6257896024617366e-05, 0.00017864530673250556, 0.005541567225009203, 7.5027281127404422e-05, 0.0002045141882263124, 0.0027484172023832798, 1.3176917491364293e-05, 8.6796266259625554e-05, 0.00019178607908543199, 0.00010836656292667612, 8.189316577045247e-05, 0.00013379986921790987, 3.8582740671699867e-05, 9.0493318566586822e-05, 9.6470052085351199e-05, 2.2690965124638751e-05, 4.209048711345531e-05, 0.00025061998167075217, 5.5325355788227171e-05, 4.4886386604048312e-05, 0.00018115638522431254, 0.00020040548406541348, 9.0450093921390362e-06, 7.8212768130470067e-05, 0.0001853672438301146, 1.2184425031591672e-05, 0.00042775971814990044, 2.7056848921347409e-05, 7.9270874266512692e-05, 6.5612221078481525e-05, 0.00024657553876750171, 0.00010127429413842037, 8.1548396337893791e-06, 0.00014055240899324417, 9.6520278020761907e-05, 0.00026624591555446386, 6.5765430917963386e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-23,-7,-16,9,-39,-78,-69,-25,-49,11,67,34,-71,114,-44,-113,-82,38,-6,-2,-70,-111,-80,-35,-126,-63,-23,71,14,93,26,-127,-86,-7,52,18,47,-127,78,-76,-13,105,-109,-1,-36,-87,106, 74,12,-28,-28,57,-127,-127,-81,61,-77,-112,109,38,-82,-1,61,-52,-112,59,6,11,-111,-127,-71,-6,-127,-120,-41,-54,20,-54,54,28,-127,66,84,13,71,-91,127,-127,7,124,-127,3,-23,-127,93, -33,40,7,-6,-65,-107,-59,-18,88,-9,-127,39,9,-71,-101,-10,-127,-26,29,12,-16,-76,-35,-23,-10,-28,-58,-12,-8,17,-23,8,107,-88,74,32,15,36,-6,16,-79,3,9,-78,-17,5,-55,16, 
  /* [0][1][][] */ -86,-127,-45,-44,-9,54,99,-105,-27,-105,-20,114,91,-64,27,-97,-121,-97,90,-76,40,-89,-101,-127,42,-120,-76,-36,127,-60,127,83,-43,-84,-15,85,-34,-76,-107,88,40,60,108,-106,-90,-118,81,120, 127,-82,-127,-127,127,40,95,-127,100,-127,-109,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-121,127,-101,-127,-127,-118,-127,-69,127,27,-110,127,127,-68,-127,-94,88,59,127,127,-116,-110,-127,123,127, -54,28,-60,-84,-119,-22,31,-38,127,-22,-75,38,58,-70,-26,-43,-37,-29,56,-71,55,-81,-38,-24,49,-4,-45,-62,16,-89,-34,19,30,-98,120,25,-35,-62,1,-14,35,53,9,-75,-55,-37,63,35, 
  /* [0][2][][] */ -61,-106,-34,-35,0,35,-4,-35,-38,-57,-16,61,78,-127,-127,-64,-43,-19,65,75,52,-32,-13,-61,33,-53,-10,-57,76,27,77,62,109,-27,-39,-11,-94,34,-17,30,8,37,14,-55,96,-77,2,31, 87,-76,-88,-86,81,18,7,-48,48,-70,-30,57,82,-26,16,93,-24,-33,78,118,83,-52,-18,-56,94,-69,-19,-100,-49,38,-43,111,-18,-48,68,6,-127,48,-13,-1,10,32,14,-65,127,-100,-13,40, -28,27,-41,-37,-81,-17,23,-12,59,-6,-13,33,32,-43,110,-28,-93,-6,32,60,73,-28,-1,-2,45,2,-3,-64,-13,27,-19,39,-88,-44,66,5,-22,21,27,-37,7,35,-5,-17,62,-34,-5,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0039386921562254429, 0.0027897332329303026, 0.0076096677221357822, 0.0055261831730604172, 0.0060298070311546326, 0.006831401027739048, 0.0066827945411205292, 0.0016964497044682503, 0.0042645535431802273, 0.0012199761113151908, 0.0022027662489563227, 0.0011159605346620083, 0.0075924256816506386, 0.23551659286022186, 0.0031886594370007515, 0.0086918529123067856, 0.1168077290058136, 0.00056001899065449834, 0.0036888411268591881, 0.0081509081646800041, 0.0046055787242949009, 0.0034804593306034803, 0.0056864945217967033, 0.0016397665021941066, 0.0038459659554064274, 0.0040999772027134895, 0.00096436601597815752, 0.0017888456350192428, 0.01065134909003973, 0.0023513275664299726, 0.0019076713360846043, 0.0076991459354758263, 0.0085172327235341072, 0.00038441290962509811, 0.0033240425400435925, 0.007878107950091362, 0.00051783805247396231, 0.018179787322878838, 0.0011499160900712013, 0.0033690121490508318, 0.0027885192539542913, 0.010479460470378399, 0.0043041575700044632, 0.00034658066579140723, 0.0059734773822128773, 0.0041021117940545082, 0.011315451003611088, 0.0027950308285653591, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4289, 156, 10157, 5931, 5924, 6927, 9258, -31, -39, -338, 2097, 493, 13238, -79137768, 2597, 17187, -63884112, -112, -381, 8803, 4045, -18, 55, 445, 3548, -814, 76, 582, 3339, 1708, 2721, 15065, 3344, 284, 314, -1460, 279, 3858, -128, 11840, 2059, 12902, -274, -81, 13211, 201, 7119, 3452, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00048149653594009578, 0.00043132519931532443, 0.0003077098517678678, 0.00031863231561146677, 0.00033232205896638334, 0.00029841021751053631, 0.00041210692143067718, 0.0016964981332421303, 0.00046786112943664193, 0.0022871014662086964, 0.00073137803701683879, 0.0017601164290681481, 0.00016948707343544811, 2.0493837737944887e-09, 0.0010200976394116879, 0.00019077303295489401, 2.0493837737944887e-09, 0.0066419299691915512, 0.00044849413097836077, 0.00043523844215087593, 0.0002649382222443819, 0.0048010093159973621, 0.00035766264772973955, 0.0014340031193569303, 0.0010749812936410308, 0.00067747611319646239, 0.0023285800125449896, 0.0021345245186239481, 0.00033088473719544709, 0.0017167397309094667, 0.0010918905027210712, 0.00015557352162431926, 0.00022108531265985221, 0.011427063494920731, 0.00051683001220226288, 0.00083493144484236836, 0.0055515514686703682, 0.00033433540374971926, 0.0027053460944443941, 0.00029617926338687539, 0.0013778676511719823, 0.00017014791956171393, 0.00056793092517182231, 0.010366049595177174, 0.00038076488999649882, 0.00044428528053686023, 0.00039091968210414052, 0.00024553341791033745, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 18,-127,53,-55,35,-20,-53,25, 
  /* [1][0][][] */ 98,84,-19,-116,13,-10,-98,127, 
  /* [2][0][][] */ 46,1,-36,127,54,116,41,104, 
  /* [3][0][][] */ 72,70,-78,127,-93,1,-6,11, 
  /* [4][0][][] */ -38,-95,67,16,-12,34,-28,-127, 
  /* [5][0][][] */ 18,4,-39,51,7,-38,43,127, 
  /* [6][0][][] */ 65,-28,-127,-64,113,20,62,-47, 
  /* [7][0][][] */ 127,13,16,-22,31,-10,86,-63, 
  /* [8][0][][] */ 16,-90,16,87,3,22,-11,-127, 
  /* [9][0][][] */ 108,-127,16,6,-9,15,-114,85, 
  /* [10][0][][] */ -127,-30,-104,26,-23,14,-94,54, 
  /* [11][0][][] */ -29,-46,-20,-119,-127,-31,47,-20, 
  /* [12][0][][] */ 16,5,-30,77,-75,-15,59,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -6,-34,-4,14,48,127,47,41, 
  /* [15][0][][] */ 45,1,24,-127,69,46,-52,70, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 9,28,127,21,-38,-11,36,29, 
  /* [18][0][][] */ 79,-127,21,36,-7,33,-98,-3, 
  /* [19][0][][] */ -127,-16,33,68,-62,-38,-94,84, 
  /* [20][0][][] */ 31,28,-46,127,-34,-123,1,62, 
  /* [21][0][][] */ 56,21,127,8,-15,-7,64,7, 
  /* [22][0][][] */ -73,-4,-127,-6,8,14,-104,7, 
  /* [23][0][][] */ -107,125,-17,-19,10,-10,127,-81, 
  /* [24][0][][] */ 8,-54,-48,82,-11,-52,90,127, 
  /* [25][0][][] */ 18,39,32,31,127,114,-70,-52, 
  /* [26][0][][] */ -89,-30,-127,2,5,14,-89,-5, 
  /* [27][0][][] */ 2,-22,-33,5,-43,127,72,47, 
  /* [28][0][][] */ -2,-16,-24,42,3,127,58,52, 
  /* [29][0][][] */ 96,18,127,7,-23,-21,86,-4, 
  /* [30][0][][] */ -91,127,-27,-23,-1,-14,112,-55, 
  /* [31][0][][] */ -44,-106,-24,11,32,-73,127,104, 
  /* [32][0][][] */ -3,9,-54,110,-15,112,93,127, 
  /* [33][0][][] */ 7,58,-9,-89,7,-8,-8,127, 
  /* [34][0][][] */ -21,77,-13,-99,30,-8,6,127, 
  /* [35][0][][] */ 127,9,-17,-50,32,27,87,-44, 
  /* [36][0][][] */ -127,-11,27,66,-35,26,-108,62, 
  /* [37][0][][] */ -12,-18,-5,49,32,127,58,58, 
  /* [38][0][][] */ 17,18,12,74,127,-8,-22,31, 
  /* [39][0][][] */ 10,30,39,-124,30,0,-51,127, 
  /* [40][0][][] */ 78,17,127,27,-20,4,81,-6, 
  /* [41][0][][] */ 0,-31,-37,94,70,127,72,126, 
  /* [42][0][][] */ -88,-4,127,24,-37,13,-26,61, 
  /* [43][0][][] */ -5,-56,14,88,-22,4,14,-127, 
  /* [44][0][][] */ 34,4,-71,-127,80,-14,-6,-101, 
  /* [45][0][][] */ -98,127,-5,-61,7,5,84,-71, 
  /* [46][0][][] */ -127,-29,45,32,-31,21,-94,38, 
  /* [47][0][][] */ 104,9,107,-2,29,-32,127,-20, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00092498818412423134, 0.00082860555266961455, 0.00059113191673532128, 0.00061211473075672984, 0.00063841365044936538, 0.00057326670503243804, 0.00079168588854372501, 0.0032590902410447598, 0.00089879363076761365, 0.0043936800211668015, 0.0014050278114154935, 0.0033813053742051125, 0.00032559639657847583, 3.937008052901092e-09, 0.0019596782512962818, 0.0003664882096927613, 3.937008052901092e-09, 0.012759607285261154, 0.00086158828344196081, 0.0008361231884919107, 0.00050896464381366968, 0.009223070926964283, 0.00068709469633176923, 0.0027548191137611866, 0.0020651135127991438, 0.0013014784781262279, 0.0044733635149896145, 0.004100569523870945, 0.00063565245363861322, 0.0032979757525026798, 0.0020975971128791571, 0.00029886749689467251, 0.00042472017230466008, 0.021952180191874504, 0.00099286623299121857, 0.0016039611073210835, 0.010664914734661579, 0.00064228143310174346, 0.0051971571519970894, 0.00056898087495937943, 0.0026469791773706675, 0.00032686593476682901, 0.0010910346172749996, 0.019913898780941963, 0.00073147570947185159, 0.00085350277367979288, 0.00075098377419635653, 0.00047168668243102729, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1197, -42904, -6618, -13017, -31688, -2558, -26560, -29239, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0019652345217764378, 0.0025285941082984209, 0.0026475004851818085, 0.0012412396026775241, 0.001185581786558032, 0.0019498560577630997, 0.0015346514992415905, 0.0010190746979787946, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-19,10,-4,124,-4,1,-2,0,-127,-92,-3,0,119,0,0, 
  /* [1][0][][] */ 0,-29,1,86,73,14,21,6,-2,-4,127,-44,0,29,-13,0, 
  /* [2][0][][] */ 0,2,-9,-14,-61,9,9,6,3,2,-17,6,0,127,-12,0, 
  /* [3][0][][] */ 0,-7,-15,-127,81,16,68,12,-2,68,-2,38,0,5,22,0, 
  /* [4][0][][] */ 0,50,-27,37,-59,31,127,15,2,-67,16,-4,0,-3,8,0, 
  /* [5][0][][] */ 0,-9,-11,0,-22,-32,-10,17,-1,10,-6,-51,0,-3,127,0, 
  /* [6][0][][] */ 0,21,7,-2,51,-24,-23,-6,-1,-111,118,70,0,127,61,0, 
  /* [7][0][][] */ 0,14,-8,127,8,-13,22,9,-4,78,-59,73,0,-5,55,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.08352246880531311, 0.10746524482965469, 0.11251877248287201, 0.052752681076526642, 0.050387226045131683, 0.082868881523609161, 0.065222688019275665, 0.043310675770044327, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 11164, 62254, 12883, 11494, 22257, 13673, 5241, -3273, 6276, 29147, 14403, -445, 26276, 9749, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00023676641285419464, 6.5117754274979234e-05, 0.00027852528728544712, 0.00015988216910045594, 0.00014902798284310848, 0.00037898693699389696, 0.000739191600587219, 2.6667907150113024e-05, 0.00029449499561451375, 0.00020562205463647842, 0.00074432633118703961, 0.00072724185883998871, 0.00024266066611744463, 0.00020796424360014498, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,52,-105,5,127,-25, 24,-24,90,-2,-73,67,-95,79,-94,-28,3,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-24,13,-44,16,-29,15,-28,0,3,-110,-49,8,-29,-14, -78,-42,-58,-15,-8,-26,8,-26,-109,-89,21,-12,-104,-127,1,23, 14,1,64,2,2,34,-25,35,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,66,2,-7,39,-39,53,-76,0,0,5,40,1,-27,23, 23,-4,30,-2,-27,40,-34,22,-125,-13,0,85,-58,0,-28,-111, 21,-7,18,0,4,14,9,23,-115,4,-1,-127,107,2,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.010062572546303272, 0.0027675044257193804, 0.011837325058877468, 0.0067949919030070305, 0.0063336892053484917, 0.016106944531202316, 0.031415641307830811, 0.0011333860456943512, 0.012516036629676819, 0.0087389368563890457, 0.031633868813514709, 0.030907778069376945, 0.010313077829778194, 0.0088384803384542465, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 17738, -51138, 10010, 171101, 17124, 27544, 5481, 113812, 17626, 16444, 534314, -1073741824, 27280, 20797, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00020680978195741773, 0.00034799872082658112, 6.3548039179295301e-05, 1.7689193555270322e-05, 0.00031776045216247439, 0.00014569450286217034, 0.00041020230855792761, 1.5466188415302895e-05, 8.2978869613725692e-05, 0.0001680998393567279, 1.1019447811122518e-05, 1.1533876076441629e-09, 0.00015386758605018258, 0.00012531819811556488, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 42,-10,25, -7,-28,10, -120,-127,-59, 
  /* [1][1][][] */ -2,-12,-6, -24,-4,-9, 1,-46,9, 
  /* [1][2][][] */ -12,4,-11, -11,-5,-11, 29,-34,5, 
  /* [2][0][][] */ 18,-21,-22, 76,110,-10, 48,-38,8, 
  /* [2][1][][] */ 11,11,-4, 74,127,-36, 13,-17,-20, 
  /* [2][2][][] */ 57,-66,24, 96,-32,-8, 31,-65,6, 
  /* [3][0][][] */ 13,37,7, 41,102,31, 3,8,0, 
  /* [3][1][][] */ 23,37,8, 61,127,24, -10,-13,9, 
  /* [3][2][][] */ 6,3,5, 17,20,2, -5,-6,2, 
  /* [4][0][][] */ 44,73,-12, 31,97,3, -7,12,1, 
  /* [4][1][][] */ 54,92,54, 45,127,38, 40,57,-13, 
  /* [4][2][][] */ 67,87,44, 45,116,7, -26,21,18, 
  /* [5][0][][] */ 12,-14,-111, 0,-14,-95, -7,18,-31, 
  /* [5][1][][] */ 8,-55,-127, 2,-55,-111, -4,2,-28, 
  /* [5][2][][] */ 3,6,-15, 7,-4,-8, 1,9,-11, 
  /* [6][0][][] */ 21,-64,31, 44,-86,37, 12,-15,12, 
  /* [6][1][][] */ 33,-96,59, 59,-127,68, 9,-25,19, 
  /* [6][2][][] */ 16,-37,11, 10,-46,23, -13,7,0, 
  /* [7][0][][] */ -21,41,28, -107,-33,27, -24,31,9, 
  /* [7][1][][] */ 5,12,26, -127,-102,19, -2,-6,12, 
  /* [7][2][][] */ -50,10,-32, -44,-17,-27, -49,13,-20, 
  /* [8][0][][] */ -33,-44,-75, -44,-56,-89, -63,-86,-127, 
  /* [8][1][][] */ -15,-24,-52, -26,-37,-70, -46,-68,-112, 
  /* [8][2][][] */ 18,13,-8, 7,1,-25, -10,-25,-66, 
  /* [9][0][][] */ -17,-1,6, -11,-5,-5, 7,6,-13, 
  /* [9][1][][] */ 97,113,-11, 76,127,12, -4,22,26, 
  /* [9][2][][] */ -28,-29,13, 4,-33,0, 13,2,-18, 
  /* [10][0][][] */ -23,-82,-18, 35,95,20, -6,-12,-1, 
  /* [10][1][][] */ -57,-102,-13, 80,127,15, -15,-26,0, 
  /* [10][2][][] */ -30,-19,3, 38,23,-10, -7,0,8, 
  /* [11][0][][] */ -17,-29,-1, 8,-49,4, 2,-119,-66, 
  /* [11][1][][] */ -52,-47,-20, -41,-71,-41, -24,-74,-67, 
  /* [11][2][][] */ -22,-56,-100, 117,127,58, -55,2,-64, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -53,-99,-19, -63,-113,-26, -11,-19,-7, 
  /* [13][1][][] */ 61,114,14, 57,127,24, 6,14,9, 
  /* [13][2][][] */ -10,-21,2, 0,-20,-3, -1,3,-5, 
  /* [14][0][][] */ 49,-5,-35, 80,-26,-50, 34,-8,-18, 
  /* [14][1][][] */ 91,-17,-70, 127,-42,-87, 60,-19,-35, 
  /* [14][2][][] */ 53,-13,-47, 73,-24,-53, 23,-10,-20, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.052736490964889526, 0.088739670813083649, 0.016204748302698135, 0.0045107440091669559, 0.081028908491134644, 0.037152096629142761, 0.10460158437490463, 0.0039438777603209019, 0.021159609779715538, 0.042865455150604248, 0.0028099589981138706, 2.9411381774480105e-07, 0.03923623263835907, 0.031956139951944351, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.52054345607757568, } };
const TfArray<1, int> quant46_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.45260584354400635, } };
const TfArray<1, int> quant50_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.46790421009063721, } };
const TfArray<1, int> quant53_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.55868756771087646, } };
const TfArray<1, int> quant54_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.26009535789489746, } };
const TfArray<1, int> quant58_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.23517009615898132, } };
const TfArray<1, int> quant61_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.30477637052536011, } };
const TfArray<1, int> quant62_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.26167801022529602, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.40141668915748596, } };
const TfArray<1, int> quant66_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.077566958963871002, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,12 } };
const TfArray<1, float> quant69_scale = { 1, { 0.1678888350725174, } };
const TfArray<1, int> quant69_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,12 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension69, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
